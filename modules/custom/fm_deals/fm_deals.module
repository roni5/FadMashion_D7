<?php

/**
 * Implements hook_menu().
 */
function fm_deals_menu() {
	
	$items['deals'] = array(
    'page callback' => 'fm_deals_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/*
 * implements hook_block_info()
 */
function fm_deals_block_info() {
	$blocks = array();
	
	//Define the Preview Block
	$blocks['fm_deals_preview'] = array(
	  'info' => t('Preview Deals'),
	  'cache' => DRUPAL_NO_CACHE
	);
	return $blocks;
}

/*
 * Implements hook_block_view
 */
function fm_deals_block_view($block_name = '') {
  if($block_name == 'fm_deals_preview') {
  	$content = fm_deals_preview_block_content();
    $block = array(
      'subject' => t('Coming up Next'),
      'content' => $content
    );
  }
  return $block;
}


/**
 * Implements hook_theme().
 */
function fm_deals_theme() {
	return array(
    'fm_deals_product_details' => array(
	     'variables' => array(
         'title' => '',
	       'description' => '',
	       'product' => NULL 
	    )
    ),
    'fm_deals_preview' => array(
	     'variables' => array('node' => NULL, 'image' => ''),
       'template' => 'fm_deals_preview'
    ),
  );
}

/**
 * Implements hook_commerce_currency_info().
 */
function fm_deals_commerce_currency_info() {
  return array(
    'USD' => array(
      'format_callback' => 'fm_deals_format_price'
    ),
   );
}

/**
 * Implements hook_form_alter().
 */
function fm_deals_form_alter(&$form, $form_state, $form_id) {
	$posi = strpos($form_id, 'commerce_cart_add_to_cart_form');  
  if (is_numeric($posi)){
		$form['submit']['#value'] = "Purchase Now";
		$form['#submit'][] = 'fm_deals_cart_submit';
  }
}

//REDIRECTS Deals page TO STEP 2 after submit
function fm_deals_cart_submit ($form, &$form_state) {
   //code here
   $form_state['redirect'] = 'checkout'; 
}

function fm_deals_format_price($amount, $currency, $object) {
	
  // Separate the negative symbol from the number itself.
  if ($amount < 0) {
    $negative = TRUE;
    $price = abs($amount);
  }
  else {
    $negative = FALSE;
  }
  
  // FM Custom - make 0 decimal.
  $price = number_format(commerce_currency_round($amount, $currency), 0, $currency['decimal_separator'], $currency['thousands_separator']);

  // Establish the replacement values to format this price for its currency.
  $replacements = array(
    '@code_before' => $currency['code_placement'] == 'before' ? $currency['code'] : '',
    '@symbol_before' => $currency['symbol_placement'] == 'before' ? $currency['symbol'] : '',
    '@price' => $price,
    '@symbol_after' => $currency['symbol_placement'] == 'after' ? $currency['symbol'] : '',
    '@code_after' => $currency['code_placement'] == 'after' ? $currency['code'] : '',
    '@negative' => $negative ? '-' : '',
  );

  return trim(t('@code_before @negative@symbol_before@price @symbol_after @code_after', $replacements));
	
}

/*
 * implementation of hook_preprocess_node()
 */

function fm_deals_preprocess_node(&$vars) {
	//Add  Variables to fm_group_buying node tempalte
	if($vars['node']->type == 'fm_group_buying') {
	  $product = fm_deals_get_product($vars['node']);
    
	  if(isset($vars['field_sale_price']) && isset($vars['elements']['product:commerce_price'])) {
		  //Calculate Percentage for product sale
		  $sale_price = field_get_items('node', $vars['node'], 'field_sale_price');
		  $sale_price = $sale_price[0]['amount'];
 		
		  $original_price = field_get_items('commerce_product', $product, 'commerce_price');
		  $original_price = $original_price[0]['amount'];
		
      $raw_value = round(1 - ($sale_price/$original_price), 2);
      $value = ($raw_value * 100). '%';
      $vars['sale_percentage'] = $value;
	  }
    
	  //Create quicktabs for Product Details
	  $description = field_get_items('node', $vars['node'], 'field_description_global');
	  $description = $description[0]['value'];
	  if(!isset($description)) {
	  	//If description is not set on Node than use the description of the first product listed
	  	$description = field_get_items('commerce_product', $product, 'field_description');
	    $description = $description[0]['value'];
	  }
	  $title = $vars['node']->title;
	  
    $quicktabs = new stdClass();
    $tabs['product_details'] = array(
            'title' => t('Details'),
            'type' => 'freetext',
            'text' => theme('fm_deals_product_details', 
                             array('title' => $title, 'description' => $description, 'product' => $product) ),
    );
    $tabs['product_shipping'] = array(
            'title' => t('Shipping'),
            'type' => 'freetext',
            'text' => t('Free Text2'),
    );
    $tabs['product_returns'] = array(
            'title' => t('Returns'),
            'type' => 'freetext',
            'text' => t('Free Text2'),
    );
    $quicktabs->tabs = $tabs;
    $quicktabs->table = 'quicktabs';
    $quicktabs->ajax= '0';
    $quicktabs->style = 'default';
    $quicktabs->type = 'Normal';
    $quicktabs->default_tab = 'product_details';
    $quicktabs->hide_empty_tabs = '0';
    $quicktabs->machine_name = 'fm_product_details';
    
    $qt = quicktabs_render($quicktabs);
    $vars['detail_tabs'] = $qt;
	}
}

function fm_deals_get_product($node) {
    $wrapper = entity_metadata_wrapper('node', $node);
	  
	  $field = field_info_field('field_product_reference');
	  if ($field['cardinality'] == 1) {
      $product = $wrapper->field_product_reference->value();
	  }
    else {
      $product = $wrapper->field_product_reference->get(0)->value();
    }
    return $product;
}

function theme_fm_deals_product_details($vars) {
	$title = $vars['title'];
  $description = $vars['description'];
  $product = $vars['product'];
  
  $output = '<h1 class="itemName">' . $title . '</h1>';
  $output .= '<p>' . $description . '</p>';
  return $output;
}



function fm_deals_page($nid = '') {
	if(empty($nid)) {
		$nid = fm_deals_get_default_deal();
	}
	return node_view(node_load($nid), 'full');
}

//Get the deal that needs to be active right now.  
function fm_deals_get_default_deal() {
	
	$query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'fm_group_buying')
                    ->propertyCondition('status', 1)
                    ->fieldCondition('field_start_time', 'value', REQUEST_TIME, '>')
                    ->fieldOrderBy('field_start_time', 'value', 'ASC')
                    ->range(0, 5)
                    ->execute();
  
  $first_node = array_shift($entities['node']);
  return $first_node->nid;
}

function fm_deals_preview_block_content() {
	$query = new EntityFieldQuery();
  
	$entities = $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'fm_group_buying')
                    ->propertyCondition('status', 1)
                    ->fieldCondition('field_start_time', 'value', REQUEST_TIME, '>')
                    ->fieldOrderBy('field_start_time', 'value', 'ASC')
                    ->range(1, 5)
                    ->execute();
  if(isset($entities['node'])) {
   $first_node = array_shift($entities['node']);
    $node = node_load($first_node->nid);
  
    $product = fm_deals_get_product($node);
    $images = field_get_items('commerce_product', $product, 'field_images');
    //Get First Image
    $first_image = $images[0];
    $image = array(
        'path' => $first_image['uri'],
        'alt' => $first_image['alt'],
        'title' => $first_image['title'],
        'style_name' => 'fm_preview_block_thumb'
      );
    
    $themed_image = theme('image_style', $image);
    return theme('fm_deals_preview', array('node' => $node, 'image' => $themed_image));
  }
  else {
  	return '';
  }
}


