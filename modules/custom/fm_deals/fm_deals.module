<?php

/**
 * Implements hook_menu().
 */
function fm_deals_menu() {
	
	$items['deals'] = array(
    'page callback' => 'fm_deals_page',
	  'access arguments' => array('view deals'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['deals/preview'] = array(
    'page callback' => 'fm_deals_preview_page_content',
    'access arguments' => array('view deals'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/fadmashion/deals'] = array(
    'title' => t('Deals Listing'), 
    'description' => t('Listing of all Upcoming Deals'),
    'page callback' => 'fm_deals_list',
    'access arguments' => array('administer deals list'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fm_deals.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function fm_deals_permission() {
  return array(
    'administer deals list' => array(
      'title' => t('View Deals List Admin List'),
    ),
    'view deals' => array(
      'title' => t('View Deals Page'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function fm_deals_theme() {
	return array(
    'fm_deals_product_details' => array(
	     'variables' => array(
         'title' => '',
	       'description' => '',
	       'product' => NULL,
	       'store' => NULL
	    )
    ),
    'fm_deals_shipping_returns' => array(
	     'variables' => array('isShipping' => true, 'product' => NULL, 'store' => NULL),
       'template' => 'fm_deals_shipping_returns'
    ),
  );
}

/**
 * Implements hook_commerce_currency_info().
 */
function fm_deals_commerce_currency_info() {
  /*return array(
    'USD' => array(
      'format_callback' => 'fm_deals_format_price'
    ),
   );*/
}


function fm_deals_format_price($amount, $currency, $object) {
	
  // Separate the negative symbol from the number itself.
  if ($amount < 0) {
    $negative = TRUE;
    $price = abs($amount);
  }
  else {
    $negative = FALSE;
  }
  
  // FM Custom - make 0 decimal.
  $price = number_format(commerce_currency_round($amount, $currency), 0, $currency['decimal_separator'], $currency['thousands_separator']);

  // Establish the replacement values to format this price for its currency.
  $replacements = array(
    '@code_before' => $currency['code_placement'] == 'before' ? $currency['code'] : '',
    '@symbol_before' => $currency['symbol_placement'] == 'before' ? $currency['symbol'] : '',
    '@price' => $price,
    '@symbol_after' => $currency['symbol_placement'] == 'after' ? $currency['symbol'] : '',
    '@code_after' => $currency['code_placement'] == 'after' ? $currency['code'] : '',
    '@negative' => $negative ? '-' : '',
  );

  return trim(t('@code_before @negative@symbol_before@price @symbol_after @code_after', $replacements));
	
}

/*
 * implementation of hook_preprocess_node()
 */

function fm_deals_preprocess_node(&$vars) {

	//Add  Variables to fm_group_buying node tempalte
	if($vars['node']->type == 'fm_group_buying') {
	  $product = fm_commerce_get_product($vars['node']);
		$store = fm_commerce_get_store($product);  
		
		$vars['store'] = $store;
		
		//Set Time Until for Countdown
		$details= fm_deals_group_details($vars);
		
	  if(isset($vars['field_sale_price']) && isset($vars['elements']['product:commerce_price'])) {
		  //Calculate Percentage for product sale
		  $sale_price = field_get_items('node', $vars['node'], 'field_sale_price');
		  $sale_price = $sale_price[0]['amount'];
 		
		  $original_price = field_get_items('commerce_product', $product, 'commerce_price');
		  $original_price = $original_price[0]['amount'];
		
      $raw_value = round(1 - ($sale_price/$original_price), 2);
      $value = ($raw_value * 100). '%';
      $vars['sale_percentage'] = $value;
	  }
    
	  //Create quicktabs for Product Details
	  $description = field_get_items('node', $vars['node'], 'field_description_global');
	  $description = $description[0]['value'];
	  if(!isset($description)) {
	  	//If description is not set on Node than use the description of the first product listed
	  	$description = field_get_items('commerce_product', $product, 'field_description');
	    $description = $description[0]['value'];
	  }
	  
	  $title = $product->title;
	  
	  $vars['product_details'] = theme('fm_deals_product_details', 
                             array('store' => $store, 'title' => $title, 'description' => $description, 'product' => $product) );
	  
    $quicktabs = new stdClass();
	  
	  $materials_care = field_get_items('commerce_product', $product, 'field_materials_care');
	  
	  
    $tabs['product_shipping'] = array(
            'title' => t('Shipping'),
            'type' => 'freetext',
            'text' => theme('fm_deals_shipping_returns', array('isShipping' => true, 'product' => $product, 'store' => $store) ),
    );
   $tabs['product_returns'] = array(
            'title' => t('Returns'),
            'type' => 'freetext',
            'text' => theme('fm_deals_shipping_returns', array('isShipping' => false, 'product' => $product, 'store' => $store) ),
    );
    
	 if(!empty($materials_care)) {
	  	$materials_care = $materials_care[0]['value'];
      $tabs['product_details'] = array(
              'title' => t('Details'),
              'type' => 'freetext',
              'text' => $materials_care
      );
	  }
	  
    $quicktabs->tabs = $tabs;
    $quicktabs->table = 'quicktabs';
    $quicktabs->ajax= '0';
    $quicktabs->style = 'default';
    $quicktabs->type = 'Normal';
    $quicktabs->default_tab = 'product_shipping';
    $quicktabs->hide_empty_tabs = '0';
    $quicktabs->machine_name = 'fm_product_details';
    
    $qt = quicktabs_render($quicktabs);
    $vars['detail_tabs'] = $qt;
	}
}



function theme_fm_deals_product_details($vars) {
	$title = $vars['title'];
  $description = $vars['description'];
  $product = $vars['product'];
  $store = $vars['store'];
  
  $output = '<h1 class="itemName">' . $title . '</h1>';
  $output .= '<h2 style="color: #aaa">Learn more about ' . l($store->name, 'test') . '</h2>';
  $output .= '<p>' . $description . '</p>';
  return $output;
}


/*
 * Site Logged in Homepage for deals
 */
function fm_deals_page($nid = '') {

	if(empty($nid)) {
		$default = fm_deals_get_default_deal();
		$nid = $default['nid'];
	}
	
	if(!empty($nid)) {
		drupal_goto('node/' . $nid);
	}
	else {
		drupal_set_message('There was an error in the system.  Please contact us so we can quickly resolve', 'error+');
	}
	
}

//Get the deal that needs to be active right now.  MUST return some node value.
function fm_deals_get_default_deal() {
	
	$request_time = date('Y-m-d H:i:s', REQUEST_TIME);
	
	$query = new EntityFieldQuery();
	//First try to get the deal that is happening right now.
  $entities = $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'fm_group_buying')
                    ->propertyCondition('status', 1)
                    ->fieldCondition('field_start_time', 'value', $request_time, '<')
                    ->fieldCondition('field_start_time', 'value2', $request_time, '>')
                    ->fieldOrderBy('field_start_time', 'value', 'ASC')
                    ->execute();
  if(isset($entities['node'])) {
    $first_node = array_shift($entities['node']);
    return array('nid' => $first_node->nid, 'status' => 'active');
  }
  else {
  	//If there is no active deal than get the next upcoming deal
  	$query = new EntityFieldQuery();
  	$entities = $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'fm_group_buying')
                    ->propertyCondition('status', 1)
                    ->fieldCondition('field_start_time', 'value', $request_time, '>')
                    ->fieldOrderBy('field_start_time', 'value', 'ASC')
                    ->execute();
    if(isset($entities['node'])) {
      $first_node = array_shift($entities['node']);
      return array('nid' => $first_node->nid, 'status' => 'upcoming');
    }
    else {
    	//IN the last case (should not go through), but if it does show the most previous deal
      $query = new EntityFieldQuery();
  	  $entities = $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', 'fm_group_buying')
                    ->propertyCondition('status', 1)
                    ->fieldCondition('field_start_time', 'value2', $request_time, '<')
                    ->fieldOrderBy('field_start_time', 'value', 'DESC')
                    ->execute();
      if(isset($entities['node'])) {
        $first_node = array_shift($entities['node']);
        return array('nid' => $first_node->nid, 'status' => 'ended');
      }
    }
  }
}

function fm_deals_group_details(&$vars) {
	$node = $vars['node'];
	$status = fm_deals_get_status($node);
	
	$start_time = $node->field_start_time['und'][0]['value'];
	$end_time = $node->field_start_time['und'][0]['value2'];
	$unixStartTime = strtotime($start_time);
	
	$purchaseDetails = '';
	//$color_options = fm_commerce_color_options($node);
	//
	//If start time is GREATER THAN NOW than disabled.
	if($status == 'upcoming') {
		$timerDetails = '<div style="text-align: center; padding-top: 8px;">Deal Starts <span class="countdown">' . date("D, F d @ ga", $unixStartTime) . '</span></div>';
		$untilTime = $start_time;
		
		//$purchaseDetails = '<div class="colors">Colors: ' . implode('', $color_options) . '</div>';
		$purchaseDetails .= '<div class="notify"><div class="button">' . fm_deals_notify_get_button($node) . '</div>'; 
		$purchaseDetails .= '<p style="font-size: 11px;" class="product_button_text">(We\'ll send you an e-mail 15 before the deal is on)</p>';
		$purchaseDetails .= '</div>';
	}
	elseif ($status == 'active') {
		$timerDetails = '<div class="col1">Items Left: <span>35</span></div>
               <div class="col2">Time  Left: <span class="countdown">00:00</span></div>';
		$untilTime = $end_time;
		
		$purchaseDetails = '<img class="frame" src="/' . drupal_get_path("theme","fadmashion_commerce"). '/images/bg_itemOptions_top.jpg">';
		$purchaseDetails .= '<div class="box">' .render($vars['content']['field_product_reference']) . '</div>';
	  $purchaseDetails .= '<img class="frame" src="/' . drupal_get_path("theme","fadmashion_commerce") . '/images/bg_itemOptions_bottom.jpg">';
	  
		//If start time is LESS THAN NOW this is ACTIVE
	  jquery_countdown_add(".countdown", array("until" =>  date("F d, Y g:i a", strtotime($untilTime)), 'format' => 'DHMS', "layout" => '{mnn}:{snn}'));
  
	} 
	else {
		$timerDetails = '<div style="text-align: center; padding-top: 8px;">Deal Has Ended</div>';
		$purchaseDetails = '<div class="notify"><div class="button">' . fm_deals_notify_get_button($node) . '</div>';
		$purchaseDetails .= '<p class="product_button_text">(We\'ll send you an e-mail when this deal is active again)</p></div>';
	}
	
	$vars['groupDetails'] = $timerDetails;
	$vars['purchaseDetails'] = $purchaseDetails;
}




function fm_deals_get_status($node) {
  
	$start_time = $node->field_start_time['und'][0]['value'];
	$end_time = $node->field_start_time['und'][0]['value2'];
	
	$unixStartTime = strtotime($start_time);
	$unixEndTime = strtotime($end_time);
	
	//If start time is GREATER THAN NOW than disabled.
	if(REQUEST_TIME < $unixStartTime) {
		$status = 'upcoming';
	}
	elseif (REQUEST_TIME > $unixStartTime  && REQUEST_TIME < $unixEndTime) {
		$status = 'active';
	} 
	else {
		$status = 'ended';
	}
	
	return $status;
}

/**
 * Implements hook_commerce_order_state_info().
 */
function fm_deals_commerce_order_state_info() {
  $order_states = array();

  drupal_set_message('tesasalkj');
  $order_states['expired'] = array(
    'name' => 'expired',
    'title' => t('Expire'),
    'description' => t('Orders in this state are expired by a deal timer end.'),
    'weight' => -10,
    'default_status' => 'expired',
  );
  
  return $order_states;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function fm_deals_commerce_order_status_info() {
  $order_statuses = array();
 
   $order_statuses['expired'] = array(
    'name' => 'expired',
    'title' => t('Expired Deal'),
    'state' => 'expired',
  );

  return $order_statuses;
}

