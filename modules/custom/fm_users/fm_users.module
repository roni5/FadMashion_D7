<?php

function fm_users_menu() {
	
  $items['fm_users/login_as_user/%'] = array(
    'title' => t('Login as Another User'),
    'page callback' => 'fm_users_login_as_user',
    'page arguments' => array(2),
    'access arguments' => array('login as user'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['fm_users/auth'] = array(
    'page callback' => 'fm_users_authorize',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['fm_users/email-verify/%'] = array(
    'page callback' => 'fm_users_email_verify',
    'access callback' => TRUE,
    'page arguments' => array(2),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/reset/%/%/%'] = array(
    'title' => 'Reset password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fm_user_pass_reset', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;	
}

function fm_user_pass_reset($form, &$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {

  global $user;

  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->uid) {
    // The existing user is already logged in.
    if ($user->uid == $uid) {
      drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array('%user' => $user->name, '!user_edit' => url("user/$user->uid/edit"))));
    }
    // A different user is already logged in on the computer.
    else {
      $reset_link_account = user_load($uid);
      if (!empty($reset_link_account)) {
        drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
          array('%other_user' => $user->name, '%resetting_user' => $reset_link_account->name, '!logout' => url('user/logout'))));
      } else {
        // Invalid one-time link specifies an unknown user.
        drupal_set_message(t('The one-time login link you clicked is invalid.'));
      }
    }
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
    $timeout = 86400;
    $current = REQUEST_TIME;
    // Some redundant checks for extra security ?
    $users = user_load_multiple(array($uid), array('status' => '1'));
    if ($timestamp <= $current && $account = reset($users)) {
      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
      elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
        // First stage is a confirmation form, then login
        if ($action == 'login') {
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
          // Set the new user.
          $user = $account;
          // user_login_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_login_finalize();
          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.'));
          // Let the user's password be changed without the current password check.
          $token = drupal_hash_base64(drupal_random_bytes(55));
          $_SESSION['pass_reset_' . $user->uid] = $token;

          //FADMASHION CHANGE!!!
          //drupal_goto('user/' . $user->uid . '/edit', array('query' => array('pass-reset-token' => $token)));
          drupal_goto('shop', array('query' => array('pass-reset-token' => $token)));
        }
        else {
          $form['message'] = array('#markup' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
          $form['help'] = array('#markup' => '<p>' . t('This login can be used only once.') . '</p>');
          $form['actions'] = array('#type' => 'actions');
          $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
          $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");
          return $form;
        }
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
    }
  }
}

/**
 * Implements hook_permission().
 */
function fm_users_permission() {
  return array(
    'login as user' => array(
      'title' => t('Login as User'),
    ),
  );
}


function fm_users_theme(){
	return array(
    'fm_users_invite_block' => array(
      'template' => 'fm_users_invite_block',
      'variables' => array(
         'user' => null,
         'invite_form' => null, 
         'invite_url' => NULL, 
	       'social_info' => NULL
       ) 
    ),
  );
}

function fm_users_init() {
	
	// add the login status of user
	global $user;
	$status = ($user->uid ? 1 : 0);
  drupal_add_js('var user_status=' . $status . ' ;', 'inline');
	
}

function fm_users_fullname($uid = '') {
	if(empty($uid)) {
		global $user;
		$uid = $user->uid;
	}
	
	$user_loaded = user_load($uid);
	if($user_loaded) {
	  $user_entity_wrapper = entity_metadata_wrapper('user', $user_loaded);
	  $first_name = $user_entity_wrapper->field_first_name->value();
    $last_name = $user_entity_wrapper->field_last_name->value();

	  return $first_name . ' ' . $last_name;
	} else {
		return '';
	}
}

function fm_users_firstname($uid = '') {
	if(empty($uid)) {
		global $user;
		$uid = $user->uid;
	}
	
	$user_loaded = user_load($uid);
	if($user_loaded) {
	  $user_entity_wrapper = entity_metadata_wrapper('user', $user_loaded);
	  $first_name = $user_entity_wrapper->field_first_name->value();
	return $first_name;
	} else {
		return '';
	}
}

function fm_users_email_verify($exists = true) {
	if(isset($_POST['mail'])) {
		$mail = $_POST['mail'];
	} else {
		$mail = $_POST['name'];
	}
	
  if ($val = db_query("SELECT mail FROM {users} WHERE LOWER(mail) = LOWER(:mail)", array(
      ':mail' => $mail,))->fetchField()) {
      $val = true;
  }
  else {
  	$val = false;
  }
  
  if(!$exists) {$val = !$val;}
  
  print drupal_json_encode($val);
  exit();
}

function fm_users_authorize() {
	$username = $_POST['username'];
	$pass = $_POST['pass'];
	
	$uid = user_authenticate($username, $pass);
	
	if($uid) {
	  print drupal_json_encode(true);
	}
	else { 
		if ($name = db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:name)", array(
      ':name' => $username,))->fetchField()) {
      $uid = user_authenticate($name, $pass);
      
      if($uid) {
      	print drupal_json_encode(true);
      } else {
        print drupal_json_encode(false);
      }
    }
		
	}
	exit();
}


/*
 * implements hook_block_info()
 */
function fm_users_block_info() {
	$blocks = array();
	
	//Define the Preview Block
	$blocks['fm_users_orders'] = array(
	  'info' => t('Account - My Orders'),
	  'cache' => DRUPAL_NO_CACHE
	);
	
	$blocks['fm_users_invite'] = array(
	  'info' => t('Account - Invite Form'),
	  'cache' => DRUPAL_NO_CACHE
	);
	return $blocks;
}

/*
 * Implements hook_block_view
 */
function fm_users_block_view($block_name = '') {
	global $user;
	switch ($block_name) {
		case 'fm_users_orders':
			//$content = theme('fm_commerce_store_owners_orders_admin', array('store' => $store, 'orders' => 'test'));
			$content = fm_commerce_orders_full_list();
			break;
		case 'fm_users_invite':
			$invite_form = drupal_get_form('fm_invite_send_email_form', $user);
		  $invite_url = fm_invite_get_invite_url($user);
		  $social_info = fm_deals_fb_social_info();
			$content = theme('fm_users_invite_block',  array('user' => $user, 'social_info' => $social_info,  'invite_form' => $invite_form, 'invite_url' => $invite_url));
			break;
		default:
			break;
	 }
  
	$block = array(
    'content' => $content
  );
  
  return $block;
}





//Generate Username from first and last name.
function fm_users_user_presave (&$edit, $account, $category) {
	// Make sure that our form value 'mymodule_foo' is stored as 'mymodule_bar'.
	//Generate name from registration form
	
	if(!$account->uid && isset($edit['field_first_name']) && isset($edit['field_last_name'])) {
	  $first_name = $edit['field_first_name']['und'][0]['value'];
	  $last_name = $edit['field_last_name']['und'][0]['value'];
	  $edit['name'] = $first_name . ' ' . $last_name;
	  
	  $result = db_query("SELECT COUNT(*) FROM {users} WHERE name = :name", array(':name' => $edit['name']));
    $i = 1;
	  while($result->fetchField()) {
       $new_last_name = $last_name . '_' .$i;
       $edit['name'] = $first_name . ' ' . $new_last_name;
       $result = db_query("SELECT COUNT(*) FROM {users} WHERE name = :name", array(':name' => $edit['name']));
       $i++;
     };
	}
	else { 
	  $fbu = fb_facebook_user();
	  if(isset($fbu)) {
	     //var_dump($edit);
	     $info = $GLOBALS['_fb']->api($fbu);
		   $edit['field_first_name']['und'][0]['value'] = $info['first_name'];
		   $edit['field_last_name']['und'][0]['value'] = $info['last_name'];
		   if(!fm_users_check_activate($info['email'])) {
		     $edit['status'] = 0;
		   }
	  }

	}
}


//special validator to redirect on non-activated account
function fm_users_login_name_validate($form, &$form_state)  {
	 
  if (isset($form_state['values']['name']) && user_is_blocked($form_state['values']['name'])) {
  	
  	if(fm_invite_is_activated()) {
  		$user = user_load_by_name($form_state['values']['name']);
  		user_save($user, array('status' => 1));
  	} else {
      form_set_error('name', t('Sorry, Fadmashion is currently only open for priority members.  You\'ll be hearing from us soon for your account activation'));
  	}
  	
  }
}

function fm_users_check_activate($mail) {
	$result = db_query('SELECT * FROM {fm_invite} WHERE email = :email', array(':email' => $mail));
  $mail = $result->fetchObject();
	if($mail || fm_invite_is_activated() ) {
	  return TRUE;
	}
	else {
		return FALSE;
	}
	
	return FALSE;
}

function fm_users_fb_user($op, $data, $return) {
	if($op == FB_USER_OP_POST_EXTERNAL_LOGIN) {
		if(isset($data['account'])) {
	    $account = $data['account'];
	    $mail = $account->mail;
	   
	    if(!fm_users_check_activate($mail)) {
	      //_fb_logout();
	      //drupal_goto('intro/private');
	      
	    }
		}
	}
}

function fm_users_user_delete($account) {
  db_delete('fm_invite')
    ->condition('email', $account->mail)
    ->execute();
}

/*
 *  A VERY SECURE FUNCTION!!!
 *  TODO: NEED to make sure to have permissions and security tight
 */
function fm_users_login_as_user($uid) {
  // Log user in
  drupal_set_message('ADMIN ONLY:  Logged in as new user ' . $user->mail);
  $form_state['uid'] = $uid;
  user_login_submit(array(), $form_state);
  drupal_goto('deals');
}
