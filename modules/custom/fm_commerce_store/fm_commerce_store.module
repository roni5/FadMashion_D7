<?php

/**
 * Implements hook_permission().
 */
function fm_commerce_store_permission() {
  $permissions = array(
    'administer stores' => array(
      'title' => t('Administer stores'),
      'description' => t('Allows users to perform any action on stores.'),
      'restrict access' => TRUE,
    ),
    'access stores' => array(
      'title' => t('Access stores'),
      'description' => t('Allows users to view lists of stores in the Store admin and reference lists.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function fm_commerce_store_menu() {
  $items = array();

  // admin/commerce/stores is defined by Views.
  $items['admin/commerce/stores/add'] = array(
    'title' => 'Add a store',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'fm_commerce_store_add_page',
    'access arguments' => array( 'administer stores'),
    'file' => 'fm_commerce_store.admin.inc',
  );
  $items['admin/commerce/stores/%fm_commerce_store'] = array(
    'title callback' => 'fm_commerce_store_title',
    'title arguments' => array(4),
    'page callback' => 'fm_commerce_store_edit_page',
    'page arguments' => array(4),
    'access arguments' => array( 'administer stores'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'fm_commerce_store.admin.inc',
  );
  $items['admin/commerce/stores/%fm_commerce_store/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -10,
  );
  $items['admin/commerce/stores/%fm_commerce_store/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'fm_commerce_store_form_delete_page',
    'page arguments' => array(4),
    'access arguments' => array('administer stores'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'fm_commerce_store.admin.inc',
    'weight' => 20,
  );


  return $items;
}

/**
 * Implements hook_views_api().
 */
function fm_commerce_store_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'fm_commerce_store') . '/views',
  );
}

/**
 * Implements hook_menu_alter().
 */
function fm_commerce_store_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
    $items['admin/commerce/stores/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    $items['admin/commerce/stores/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  
}



/**
 * Menu item title callback: returns the name of a store for its pages.
 *
 * @param $store
 *   The store entity as loaded via the URL wildcard.
 * @return
 *   A page title of the format "Store: [name]".
 */
function fm_commerce_store_title($store) {
  return t('Store: @name', array('@name' => $store->name));
}

/**
 * Implements hook_entity_info().
 */
function fm_commerce_store_entity_info() {
  $return = array(
    'fm_commerce_store' => array(
      'label' => t('FM Commerce store'),
      'controller class' => 'FMStoreController',
      // Don't let Entity API auto-generate the property info.
      'metadata controller class' => '',
      'uri_callback' => 'fm_commerce_store_uri',
      'module' => 'fm_commerce_store',
      'base table' => 'fm_commerce_store',
      'fieldable' => TRUE,
      'bundles' => array(
        'fm_commerce_store' => array(
          'label' => t('FM Commerce Store'),
          'admin' => array(
            'path' => 'admin/commerce/stores',
            'access arguments' => array('administer stores'),
          ),
        ),
      ),
      'entity keys' => array(
        'id' => 'store_id',
        'label' => 'name',
      ),
    ),
  );

  return $return;
}

function fm_commerce_store_uri($store) {
  return array(
    'path' => 'store/' . $store->store_id,
  );
}

/**
 * Loads a store by ID.
 */
function fm_commerce_store_load($store_id, $reset = FALSE) {
  $stores = fm_commerce_store_load_multiple(array($store_id), array());
  return $stores ? reset($stores) : FALSE;
}

/**
 * Loads multiple stores by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $store_ids
 *   An array of store ids.
 * @param $conditions
 *   (deprecated) An array of conditions on the {commerce_store} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal loading cache.
 *
 * @return
 *   An array of store entities indexed by store_id.
 */
function fm_commerce_store_load_multiple($store_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('fm_commerce_store', $store_ids, $conditions, $reset);
}

function fm_commerce_store_save($store) {
	$store = entity_get_controller('fm_commerce_store')->save($store);
}


class FMStoreController extends DrupalDefaultEntityController {
	public function create() {
		return (object) array(
		  'store_id' => '',
		  'name' => ''
		);
	}
	
	public function save($store) {
		$transaction = db_transaction();
		
		try {
			global $user;
			
			//Determine if store is new
			$store->is_new = empty($store->store_id);
			
			if(empty($store->created)) {
			  $store->created = REQUEST_TIME;
			}
			
			//Give modules the opportunity to prepare field date for saving
			field_attach_presave('fm_commerce_store', $store);
			
			if($store->is_new) {
				$store->uid = $user->uid;
				$store->status = 1;
				
				drupal_write_record('fm_commerce_store', $store);
				$op = 'insert';
			}
			else {
				drupal_write_record('fm_commerce_store', $store, 'store_id');
				$op = 'update';
			}
			
			$function = 'field_attach_' . $op;
			$function('fm_commerce_store', $store);
			
			module_invoke_all('entity_' . $op, $store, 'fm_commerce_store');
			
			unset($store->is_new);
			
			db_ignore_slave();
			
			return $store;
		}
		catch (Exception $e) {
			$transaction->rollback();
			watchdog_exception('fm_commerce_store', $e, NULL, WATCHDOG_ERROR);
			return FALSE;
		}
	} //End save();	
	
}
