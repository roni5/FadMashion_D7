<?php

define('FM_SUPPORT_MAIL', "support@fadmashion.com");
define('FM_FREE_SHIPPING', 0);

/**
 * Implements hook_form_alter().
 * 
 * Change the Add to Cart form to add Colors/Sizes and custom Submit function
 */
function fm_commerce_form_alter(&$form, $form_state, $form_id) {
	
	$posi = strpos($form_id, 'commerce_cart_add_to_cart_form');  
  if (is_numeric($posi)){
  	
  	drupal_add_library('jquery_plugin', 'validate');
  	
  	$node = $form_state['build_info']['args']['2']['entity'];
	  $product = fm_commerce_get_product($node);
	  
	  $colors = fm_commerce_color_options($product);
	  $sizes = fm_commerce_size_options($product);
	  
	  $form['#action'] = url('node/' . $node->nid);
	   $form['#token'] = FALSE;
	   
	   
	  //ADD color options to cart form
	  if (count($colors) > 1) {
	  	
	    $default_color = array_keys($colors);
	    $default_color = array_shift($default_color); 
	    
	    $form['colors'] = array(
	       '#type' => 'select',
	       '#title' => t('Color') . ':',
	       '#options' => $colors,
         '#weight' => -1,
	       '#default_value' => $default_color,
	       '#attributes' => array('size' => count($colors) > 1 ? count($colors) : 2),
	       '#suffix' => '<br clear="all">',
	    );
	    $form['color-hovers'] = array(
	       '#markup' => theme('fm_commerce_stock_hovers', array('colors' => $colors, 'product' => $product))
	    );
	  }
    if (count($sizes) > 1) {
    	
	    $default_size = array_keys($sizes);
	    $default_size = array_shift($default_size); 
	    
	    $form['sizes'] = array(
	       '#type' => 'select',
	       '#title' => t('Size') . ':',
	       '#options' => $sizes,
         '#weight' => -5,
	       '#default_value' => $default_size,
	       '#attributes' => array('size' => count($sizes) > 1 ? count($sizes) : 2),
	       '#suffix' => '<br clear="all">'
	    );
	     $form['sizes-hovers'] = array(
	       '#markup' => theme('fm_commerce_stock_hovers', array('sizes' => $sizes, 'product' => $product))
	    );
	  }
	  
	  if(count($colors) > 1 || count($sizes) > 1) {
	    $form['#attached']['js'] = array(
        drupal_get_path('module', 'fm_commerce') . '/js/fm_commerce_color.js',
        drupal_get_path('theme', 'fadmashion_commerce') . '/js/jquery.selectBox.min.js'
      );
	  }
	  
	  $form['#id'] = "commerce-cart-add-to-cart-form";
	  
	  
		$form['submit']['#value'] = "Buy It";
		//$form['submit']['#suffix'] = $error_message;
		$form['submit']['#attributes'] = array(
		  'class' => array( 'buyit-button'),
		  
    );
    
    if(!user_access('view express checkout')) {
    	//$error_message =  '<div id="buyit-error" style="display: none">' . t('Fadmashion.com is only open to Members Only to ensure quality service.') . '</div>';
    	//$form['submit']['#suffix'] = $error_message;
    	//$form['submit']['#attributes']['disabled'] = 'disabled';
    }
    
	  /*$options['bt_drupal_buyit_error'] = array(
      'cssSelect' => '.itemOptions .box',
      'trigger' => array('hover', 'click'),
	    'positions' => array('top'),
	    'fill' =>  "rgb(255, 255, 255)",
	    //'ajaxPath' => array("$(this).attr('ref')"),
	    'contentSelector' => " $('#buyit-error').html()",
	    'width' => '250px',
      'style' => 'hulu',
      );
    beautytips_add_beautytips($options);*/
    
    
		$form['#submit'][] = 'fm_commerce_cart_submit';
  }
}

//REDIRECTS Deals page TO STEP 2 after submit
function fm_commerce_cart_submit($form, &$form_state) {

	$values = $form_state['values'];
	
	//Clear default add to cart messages. 
	$messages = drupal_get_messages();
	
  global $user;
	// First attempt to load the customer's shopping cart order.
  $order = commerce_cart_order_load($user->uid);
  	
  // If no order existed, create one now.
  if (empty($order)) {
    return NULL;
  }
  // Wrap the order for easy access to field data.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  
	$node_entity = $form_state['context']['entity'];
	
	$line_item = $form_state['line_item'];
	$line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
	$line_item_wrapper->field_node_reference = $node_entity->nid;
	
	if(isset($values['sizes']) && !empty($values['sizes'])) {
	  $line_item_wrapper->field_order_size = $values['sizes'];
	}
  if(isset($values['colors']) && !empty($values['colors'])) {
	  $line_item_wrapper->field_order_color = $values['colors'];
	}
	
	$product = $line_item_wrapper->commerce_product->value();
	$store = fm_commerce_get_store($product);
	
	//SPECIAL FOR Deals functionality, make only 1.
	$line_item->quantity = 1;
	$ref_line_item_id = $line_item->line_item_id;
	commerce_line_item_save($line_item);
	// Clear the line item cache so the updated quantity will be available to
  // the ensuing load instead of the original quantity as loaded above.
  entity_get_controller('commerce_line_item')->resetCache(array($line_item->line_item_id));

	
	
	//ADD the Discount Line Type
	$node = node_load($node_entity->nid);
	$retail_price = $product->commerce_price['und'][0]['amount'];
  $sale_price = $node->field_sale_price['und'][0]['amount'];
  $discount = -1 * ($retail_price - $sale_price);

  $discount_line_item = NULL;
  $shipping_line_item = NULL;
  $coupon_line_item = NULL;
  $credits_line_item = NULL;
  
  // Loop through the line items looking for discounts.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
  	
     // If this line item matches the product being added...
     if ($line_item_wrapper->type->value() == 'product' ) {
       // remove line items that don't have the current active deals
       $node = $line_item_wrapper->field_node_reference->value(); 
       if($node->nid != $node_entity->nid) {
       //if(true) {
         //remove line item
         $line_item_wrapper->delete();
       }
     }
     
     if (empty($discount_line_item) &&
         $line_item_wrapper->type->value() == 'deals_discount' ) {
       // Exit this loop with the $line_item intact so it gets updated.
         $discount_line_item = $line_item_wrapper->value();
     }
     
     // If this line item matches the product being added...
     if (empty($shipping_line_item) &&
         $line_item_wrapper->type->value() == 'shipping' ) {
       // Exit this loop with the $line_item intact so it gets updated.
       $shipping_line_item = $line_item_wrapper->value();
     }
     
    // Find line item associated with this coupon:
     if ($line_item_wrapper->type->value() == 'coupon' ) {
        $line_item_wrapper->delete();
    }
  
    if (empty($credits_line_item) &&
        $line_item_wrapper->type->value() == 'credits_amount' ) {
        $credits_line_item = $line_item_wrapper->value();
    }
  }
  
  if (empty($discount_line_item)) { 
    $discount_line_item = fm_commerce_deals_discout_line_item_new($order->order_id);
    
    $discount_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $discount_line_item);
	  $discount_line_item_wrapper->commerce_unit_price->amount = $discount;
    $discount_line_item_wrapper->commerce_unit_price->currency_code = 'USD';
    $discount_line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
    $discount_line_item_wrapper->commerce_unit_price->value(),
      'base_price',
      $discount_line_item_wrapper->commerce_unit_price->value(),
      TRUE
    );
    $discount_line_item_wrapper->field_product_line_item = $ref_line_item_id;
    
    // Save the line item now so we get its ID.
    commerce_line_item_save($discount_line_item);
     
    //Add it to the order's line item reference value.
    $order_wrapper->commerce_line_items[] = $discount_line_item;
  } else {
  	$discount_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $discount_line_item);
  	$discount_line_item_wrapper->field_product_line_item = $ref_line_item_id;
  	
  	$discount_line_item_wrapper->commerce_unit_price->amount = $discount;
    $discount_line_item_wrapper->commerce_unit_price->currency_code = 'USD';
    
    
    $discount_line_item->quantity = 1;
    commerce_line_item_rebase_unit_price($discount_line_item);
  	commerce_line_item_save($discount_line_item);
  }
  
  
  if (empty($credits_line_item)) { 
  	$credits_ammount = fm_users_credits_get();
  	
  	if($credits_ammount > 0) {
	    $credits_line_item = fm_commerce_credits_line_item_new($order->order_id);
	    $credits_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $credits_line_item);
		  $credits_line_item_wrapper->commerce_unit_price->amount = -1 * $credits_ammount * 100;
	    $credits_line_item_wrapper->commerce_unit_price->currency_code = 'USD';
	    $credits_line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
	    $credits_line_item_wrapper->commerce_unit_price->value(),
	      'base_price',
	      $credits_line_item_wrapper->commerce_unit_price->value(),
	      TRUE
	    );
	    
	    // Save the line item now so we get its ID.
	    commerce_line_item_save($credits_line_item);
	     
	    //Add it to the order's line item reference value.
	    $order_wrapper->commerce_line_items[] = $credits_line_item;
  	}
  } else {
  }
  
  
  //remove coupon line item from order
/* if(!empty($coupon_line_item)) {
 	  // Remove the line item from the line item reference field.
    commerce_entity_reference_delete($order, 'commerce_line_items', 'line_item_id', $coupon_line_item->line_item_id);
 	  $ret = commerce_line_item_delete($coupon_line_item->line_item_id);
 	  entity_get_controller('commerce_line_item')->resetCache(array($coupon_line_item->line_item_id));
 	  //db_query('DELETE FROM {commerce_coupon_log} WHERE order_id = :order_id', array(':order_id' => $order->order_id));
 	  commerce_order_save($order);
  }*/
  
  
  
   
  commerce_order_calculate_total($order);
  $order_total = $order_wrapper->commerce_order_total->value();
  $order_total = $order_total['amount'];
  //SHIPPING LINE ITEM
  if (empty($shipping_line_item)) { 
  	
  	if(isset($store->field_shipping_rate) && !empty( $store->field_shipping_rate['und'][0]['amount'])) {
  	
  		if($order_total < FM_FREE_SHIPPING) {
  	    $shipping_rate = $store->field_shipping_rate['und'][0]['amount'];
  		}
  		else {
  			$shipping_rate = 0;
  		}
  	
  	  $shipping_method = shipping_plugin_get_plugin('quotes', 'flat_rate');
      $shipping_line_item = commerce_line_item_new('shipping');
      $shipping_line_item->line_item_label = 'Flat Rate Shipping';
      $shipping_line_item->quantity = 1;
      $shipping_line_item->order_id = $order->order_id;
      $shipping_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $shipping_line_item);
	    $shipping_line_item_wrapper->commerce_unit_price->amount = $shipping_rate;
      $shipping_line_item_wrapper->commerce_unit_price->currency_code = 'USD';
      $shipping_line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
      $shipping_line_item_wrapper->commerce_unit_price->value(),
        'base_price',
        $shipping_line_item_wrapper->commerce_unit_price->value(),
        TRUE
      );
    
      // Save the line item now so we get its ID.
      commerce_line_item_save($shipping_line_item);
     
      //Add it to the order's line item reference value.
      $order_wrapper->commerce_line_items[] = $shipping_line_item;
  	}
  } else {
  	
  	$shipping_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $shipping_line_item);
  	if($order_total < FM_FREE_SHIPPING) {
  		if(isset($store->field_shipping_rate) && !empty( $store->field_shipping_rate['und'][0]['amount'])) {
  	    $shipping_rate = $store->field_shipping_rate['und'][0]['amount'];
  	    $shipping_line_item_wrapper->commerce_unit_price->amount = $shipping_rate;
  	    var_dump($shipping_rate);
  		}
  	} else {
  		$shipping_line_item_wrapper->commerce_unit_price->amount = 0;
  	}
    $shipping_line_item_wrapper->commerce_unit_price->currency_code = 'USD';
    
    commerce_line_item_rebase_unit_price($shipping_line_item);
  	commerce_line_item_save($shipping_line_item);
  }
  
  
  // Save the updated order.
  commerce_order_save($order);
  
  
  
   //Redirect here
 $form_state['redirect'] = 'express-checkout'; 
 //$form_state['redirect'] = 'deals/preview'; 
}



function fm_commerce_color_options($product) {
	$images = field_get_items('commerce_product', $product, 'field_product_images');
	
	$colors = array();
	foreach($images as $pos => $image) {
		$picture = node_load($image['nid']);
		$hex = field_get_items('node', $picture, 'field_color_code');
		$hex = $hex[0]['value'];
		
		$color_name = field_get_items('node', $picture, 'field_color_name');
		
		//check if it isn't 
		if(!empty($hex)  && $hex != 'ffffff') {
		  $colors[$hex . '_' . $color_name[0]['value']] = $pos;
		  
		}
	}
	return $colors;
}

function fm_commerce_size_options($product) {
	
	$product_sizes = field_get_items('commerce_product', $product, 'field_product_sizes');
  $tableData = $product_sizes[0]['tabledata'];
  $header = $tableData[0];
	
	$sizes = array();
	foreach($header as $pos => $size) {
		//check if it isn't 
		if($size != '') {
		  $sizes[$size] = $size;
		} 
	}
	return $sizes;
}

function fm_commerce_get_product($node) {
	
    $wrapper = entity_metadata_wrapper('node', $node);
	  
	  $field = field_info_field('field_product_reference');
	  if ($field['cardinality'] == 1) {
      $product = $wrapper->field_product_reference->value();
	  }
    else {
      $product = $wrapper->field_product_reference->get(0)->value();
    }
    return $product;
}


function fm_commerce_get_display_node($product, $type = 'fm_group_buying') {

	  $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', $type);
	  $query->propertyCondition('status', 1);
	  $query->fieldCondition('field_product_reference', 'product_id', $product->product_id);
    $result = $query->execute();
	  
    foreach($result['node'] as $nid => $row) {
	    	if ($row->type == $type) {
	    		$node = node_load($nid);
	    		return $node;
	    	}
	  }
	  
	 
    
	
	//$node = node_load(502);
	//return $node;
	  
	  return null;
}

function fm_commerce_get_order_product($order) {
	
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
	// Loop through the line items looking for products.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    switch ($line_item_wrapper->type->value()) {
  		case 'product':
  		 $product = $line_item_wrapper->commerce_product->value();
       return $product;
       break;
    }
  } 
  
  return '';
}

function fm_commerce_get_order_node($order) {
	
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
	// Loop through the line items looking for products.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    switch ($line_item_wrapper->type->value()) {
  		case 'product':
       $node = $line_item_wrapper->field_node_reference->value(); 
       return $node;
       break;
    }
  } 
}

function fm_commerce_get_order_options($order) {
	
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
	// Loop through the line items looking for products.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    switch ($line_item_wrapper->type->value()) {
  		case 'product':
  		 $color = $line_item_wrapper->field_order_color->value();
	     $size = $line_item_wrapper->field_order_size->value();
       return array('color' => $color, 'size' => $size);
       break;
    }
  }  
}
	  
	  

function fm_commerce_get_store($product) {
	$store_ref = field_get_items('commerce_product', $product, 'field_store_reference');
	$store_id = $store_ref[0]['store_id'];
	
	$stores = fm_commerce_store_load_multiple(array($store_id));
	return $stores[$store_id];
}

function fm_commerce_color_array($color) {
	$color = explode('_', $color);
	return array('hex' => $color[0], 'name' => $color[1]);
} 

function fm_commerce_product_image_thumb($product, $image_style, $attributes = array('class' => 'thumb')) {

  $images = field_get_items('commerce_product', $product, 'field_product_images');
	//Get First Image
  $first_image = node_load($images[0]['nid']);
  
  $first_image = field_get_items('node', $first_image, 'field_product_image');
  $first_image = $first_image[0];
  
  $image = array(
      'path' => $first_image['uri'],
      'alt' => $first_image['alt'],
      'title' => $first_image['title'],
      'attributes' => $attributes,
      'style_name' => $image_style
  );

  
  return theme('image_style', $image);
}




function ago($timestamp, $pre_text = '') {
	  $interval = date('U') - $timestamp;
    $hour = 60*60;
    $day = 24*$hour;
    $time_ago = $pre_text;
    if ($interval < $hour) {
      $time_ago .= t("a few moments ago");
    }
    elseif ($interval < $day) {
      $time_ago .= t("today");
    }
    elseif ($interval < 2*$day) {
      $time_ago .= t("yesterday");
    }
    else {
      $time_ago .= format_interval($interval, 1) . t(' ago');
    }
    return $time_ago;
	
}



/*
 * implements hook_cron()
 * Sets product status to 0 if there is no display node
 * */
function fm_commerce_cron() {
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'commerce_product')
	      ->entityCondition('bundle', 'fm_fashion_product');
	      
	$products = $query->execute();
	$products_ret = array();
	if(isset($products['commerce_product'])) {
    foreach($products['commerce_product'] as $product_id => $product) {
        $product = commerce_product_load($product_id);
      	$node = fm_commerce_get_display_node($product);
    	  if(!isset($node)) {
    		   $product->status = 0;
    		   commerce_product_save($product);
    	}
    }	
	}
	
	//GET all inactive stores and make sure products are inactive too.
  $query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'fm_commerce_store');
	$query->propertyOrderBy('weight', 'asc');
	$query->propertyCondition('status', 0);
	$result = $query->execute();

  $matches = array();
  foreach ($result['fm_commerce_store'] as $store_id => $store) {
    $shop = fm_commerce_store_load($store_id);
    $products = fm_commerce_store_get_products($shop);
    foreach($products as $product) {
    	$product->status = 0;
      commerce_product_save($product);
    }
  }
  
	 
}


