<?php

/**
 * Implements hook_form_alter().
 * 
 * Change the Add to Cart form to add Colors/Sizes and custom Submit function
 */
function fm_commerce_form_alter(&$form, $form_state, $form_id) {
	
	$posi = strpos($form_id, 'commerce_cart_add_to_cart_form');  
  if (is_numeric($posi)){
  	
  	drupal_add_library('jquery_plugin', 'validate');
  	
  	$node = $form_state['build_info']['args']['4']['options']['entity'];
	  $product = fm_commerce_get_product($node);
	  
	  //$colors = fm_commerce_color_options($product);
	  //$sizes = fm_commerce_color_options($product);
	  
	  //ADD color options to cart form
	  /*if (count($colors) > 1) {
	    $form['colors'] = array(
	       '#type' => 'select',
	       '#title' => t('Select Colors'),
	       '#options' => $colors,
         '#weight' => -1,
	      '#attributes' => array('size' => count($colors))
	    );
	  }
    if (count($sizes) > 1) {
	    $form['sizes'] = array(
	       '#type' => 'select',
	       '#title' => t('Select Sizes'),
	       '#options' => $sizes,
         '#weight' => -5,
	       '#attributes' => array('size' => count($sizes))
	    );
	  }
	   
	  if(count($colors) > 1 || count($sizes) > 1) {
	    $form['#attached']['js'] = array(
        drupal_get_path('module', 'fm_commerce_color') . '/fm_commerce_color.js',
        drupal_get_path('theme', 'fadmashion_commerce') . '/js/jquery.selectBox.min.js'
      );
	  }*/
	  
	  $form['#id'] = "commerce-cart-add-to-cart-form";
	  
		$form['submit']['#value'] = "Purchase Now";
		$form['submit']['#attributes'] = array(
		  'class' => array('red')
    );
    
		$form['#submit'][] = 'fm_commerce_cart_submit';
  }
}

//REDIRECTS Deals page TO STEP 2 after submit
function fm_commerce_cart_submit($form, &$form_state) {

	//Clear default add to cart messages. 
	$messages = drupal_get_messages();
	
  global $user;
	// First attempt to load the customer's shopping cart order.
  $order = commerce_cart_order_load($user->uid);
  	
  // If no order existed, create one now.
  if (empty($order)) {
    return NULL;
  }
  // Wrap the order for easy access to field data.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  
	$node_entity = $form_state['values']['display_uri']['options']['entity'];
	
	$line_item = $form_state['line_item'];
	$line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
	$line_item_wrapper->field_node_reference = $node_entity->nid;
	
	$product = $line_item_wrapper->commerce_product->value();
	$store = fm_commerce_get_store($product);
	
	//SPECIAL FOR Deals functionality, make only 1.
	$line_item->quantity = 1;
	$line_item = commerce_line_item_save($line_item);
	
	// Clear the line item cache so the updated quantity will be available to
  // the ensuing load instead of the original quantity as loaded above.
  entity_get_controller('commerce_line_item')->resetCache(array($line_item->line_item_id));
	
	$ref_line_item_id = $line_item->line_item_id;
	
	
	//ADD the Discount Line Type
	$node = node_load($node_entity->nid);
	$retail_price = $product->commerce_price['und'][0]['amount'];
  $sale_price = $node->field_sale_price['und'][0]['amount'];
  $discount = -1 * ($retail_price - $sale_price);

  $discount_line_item = NULL;
  $shipping_line_item = NULL;
  // Loop through the line items looking for discounts.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
  	
     // If this line item matches the product being added...
     if (empty($discount_line_item) &&
         $line_item_wrapper->type->value() == 'deals_discount' ) {
       // Exit this loop with the $line_item intact so it gets updated.
       $discount_line_item = $line_item_wrapper->value();
     }
     
     // If this line item matches the product being added...
     if (empty($shipping_line_item) &&
         $line_item_wrapper->type->value() == 'shipping' ) {
       // Exit this loop with the $line_item intact so it gets updated.
       $shipping_line_item = $line_item_wrapper->value();
     }
  }
  
  if (empty($discount_line_item)) { 
    $discount_line_item = fm_commerce_deals_discout_line_item_new($order->order_id);
    
    $discount_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $discount_line_item);
	  $discount_line_item_wrapper->commerce_unit_price->amount = $discount;
    $discount_line_item_wrapper->commerce_unit_price->currency_code = 'USD';
    $discount_line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
    $discount_line_item_wrapper->commerce_unit_price->value(),
      'base_price',
      $discount_line_item_wrapper->commerce_unit_price->value(),
      TRUE
    );
    
    $discount_line_item_wrapper->field_product_line_item = $ref_line_item_id;
    
    // Save the line item now so we get its ID.
    $discount_line_item = commerce_line_item_save($discount_line_item);
     
    //Add it to the order's line item reference value.
    $order_wrapper->commerce_line_items[] = $discount_line_item;
  } else {
  	$discount_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $discount_line_item);
  	$discount_line_item_wrapper->field_product_line_item = $ref_line_item_id;
  	
  	$discount_line_item = commerce_line_item_save($discount_line_item);
  }
  
  //SHIPPING LINE ITEM
  
  if (empty($shipping_line_item)) { 
  	
  	if(isset($store->field_shipping_rate) && !empty( $store->field_shipping_rate['und'][0]['amount'])) {
  	
  	  $shipping_rate = $store->field_shipping_rate['und'][0]['amount'];
  	
  	  $shipping_method = shipping_plugin_get_plugin('quotes', 'flat_rate');
      $shipping_line_item = commerce_line_item_new('shipping');
      $shipping_line_item->line_item_label = 'Flat Rate Shipping';
      $shipping_line_item->quantity = 1;
      $shipping_line_item->order_id = $order->order_id;
      $shipping_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $shipping_line_item);
	    $shipping_line_item_wrapper->commerce_unit_price->amount = $shipping_rate;
      $shipping_line_item_wrapper->commerce_unit_price->currency_code = 'USD';
      $shipping_line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
      $shipping_line_item_wrapper->commerce_unit_price->value(),
        'base_price',
        $shipping_line_item_wrapper->commerce_unit_price->value(),
        TRUE
      );
    
      // Save the line item now so we get its ID.
      $shipping_line_item = commerce_line_item_save($shipping_line_item);
     
      //Add it to the order's line item reference value.
      $order_wrapper->commerce_line_items[] = $shipping_line_item;
  	}
  } else {
  	
  }
  
  // Save the updated order.
  commerce_order_save($order);
  
   //Redirect here
  $form_state['redirect'] = 'express-checkout'; 
}



function fm_commerce_color_options($product) {
	$images = field_get_items('commerce_product', $product, 'field_images');
	
	$colors = array();
	foreach($images as $pos => $image) {
		//check if it isn't 
		if(!empty($image['fm_commerce_color_hex'])  && $image['fm_commerce_color_hex'] != 'ffffff') {
		  $colors[$image['fm_commerce_color_hex']] = $pos;
		  
		}
	}
	return $colors;
}

function fm_commerce_size_options($product) {
	
	$product_sizes = field_get_items('commerce_product', $product, 'field_product_sizes');
  $tableData = $product_sizes[0]['tabledata'];
  $header = $tableData[0];
	
	$sizes = array();
	foreach($header as $pos => $size) {
		//check if it isn't 
		if($size != '') {
		  $sizes[$size] = $size;
		} 
	}
	return $sizes;
}

function fm_commerce_get_product($node) {
	
    $wrapper = entity_metadata_wrapper('node', $node);
	  
	  $field = field_info_field('field_product_reference');
	  if ($field['cardinality'] == 1) {
      $product = $wrapper->field_product_reference->value();
	  }
    else {
      $product = $wrapper->field_product_reference->get(0)->value();
    }
    return $product;
}

function fm_commerce_get_store($product) {
	$store_ref = field_get_items('commerce_product', $product, 'field_store_reference');
	$store_id = $store_ref[0]['store_id'];
	
	$stores = fm_commerce_store_load_multiple(array($store_id));
	return $stores[$store_id];
}




