<?php

/**
 * Implements hook_menu().
 */
function fm_commerce_express_checkout_menu() {
	
	$items['express-checkout/sign-in'] = array(
    'page callback' => 'fm_commerce_express_checkout_login',
	  'access arguments' => array('view deals'),
    'type' => MENU_NORMAL_ITEM,
  );
  
	$items['express-checkout'] = array(
    'page callback' => 'fm_commerce_express_checkout_page',
	  'access arguments' => array('view deals'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['express-checkout/confirmation'] = array(
    'page callback' => 'fm_commerce_express_checkout_confirmation_page',
	  'access arguments' => array('view deals'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}


/**
 * Implements hook_permission().
 */
function fm_commerce_express_checkout_permission() {
  return array(
    'view express checkout' => array(
      'title' => t('View Express Checkout Page'),
    ),
  );
}
function fm_commerce_express_checkout_page() {
	//drupal_set_message('Check back in 12-24 hours for updates as we are currently fixing a technical issue related to payments.', 'error');
	
	return drupal_get_form('fm_commerce_express_checkout_form');
}

function fm_commerce_express_checkout_confirmation_page() {
	
	$order_id = $_GET['order-id'];
	if(!isset($order_id)) { drupal_goto();}
	$vars = fm_commerce_orders_detail_vars($order_id);
	
	return theme('fm_commerce_express_checkout_confirmation', $vars);
}

function fm_commerce_express_checkout_login() {
	global $user;
	watchdog($user->uid, 'debug code');

	if($user->uid) {
		drupal_goto('express-checkout');
	}
	
	$forgot_password_form = drupal_get_form('user_pass');
	
	drupal_add_js(drupal_get_path('module', 'fm_users_register') . '/fm_users_register.js');
	$output = theme('fm_commerce_express_checkout_login', array('forgot_password' => $forgot_password_form));
	
	return $output;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function fm_commerce_express_checkout_form_user_login_block_alter(&$form, &$form_state) {
  if (arg(0) == 'express-checkout' && arg(1) == 'sign-in') {
    $form['#submit'][0] = 'fm_commerce_express_checkout_redirect_user_login_submit';
  }
}

function fm_commerce_express_checkout_redirect_user_login_submit($form, &$form_state) {
  
	//Get Session Order and resave with uid of logged in person.
	$order = commerce_cart_order_load();
	
	global $user;
  $user = user_load($form_state['uid']);

  //Set uid of order and save it
  $order->uid = $user->uid;
  commerce_order_save($order);
  
  $form_state['redirect'] = 'express-checkout';
  user_login_finalize($form_state);
}

//Replace the drupal commerce checkout form with our own 
//preffer having complete control of fomrs rather than doing through commerce admin (anish)
function fm_commerce_express_checkout_form($form, $form_state) {

  global $user;
  $order = commerce_cart_order_load($user->uid);
  $form_state['order'] = $order;
  
 // Display page 2 if $form_state['page_num'] == 2
  if (!empty($form_state['page_num']) && $form_state['page_num'] == 2) {
    return fm_commerce_express_checkout_form_page_two($form, $form_state);
  }
 
  // Otherwise we build page 1.
  $form_state['page_num'] = 1;
  
  //add JS variable if edit
  $isEdit = isset($form_state['page_values']) ? 'true' : 'false';
  drupal_add_js('var isEdit = ' . $isEdit . ';', 'inline');
  
  // If no order existed, create one now.
  if (empty($order)) {
  	drupal_set_message('We couldn\'t find your order, please contact the admin for issues', 'error');
    drupal_goto();
  }
  
  if(!$user->uid) {
  	if(!isset($_GET['guest'])) {
      drupal_goto('express-checkout/sign-in');
  	}
  	//Add About You section
  	else {
  		 // Add the field widgets for the profile.
  		 $field_name = 'user_register';
  		 $form[$field_name]['first_name'] = array('#type' => 'textfield', '#required' => true, '#title' => t('First Name') );
  		 $form[$field_name]['last_name'] = array('#type' => 'textfield','#required' => true, '#title' => t('Last Name') );
  	   $form[$field_name]['mail'] = array('#type' => 'textfield', '#required' => true, '#title' => t('E-mail Address') );
  	   
  		 $session_mail = fm_users_register_session_email();
    	 if(isset($session_mail) && !empty($session_mail)) {
  	    $form[$field_name]['mail']['#default_value'] =  $session_mail;
    	 } 
    	
  		 $form[$field_name]['pass'] = array('#type' => 'password_confirm', '#required' => true);
       //field_attach_form('user', $user, $form, $form_state);
    }
  }
  
  
  /* ADD Shipping Profile to Form */
  if( !isset($_GET['shipping']) || $_GET['shipping'] == 'new' ) {
    $shipping_profile = commerce_customer_profile_new('shipping', $order->uid);
  }
  else{
  	$shipping_id = $_GET['shipping'];
  	$shipping_profile = commerce_customer_profile_load($shipping_id);
  }
  
  $form['shipping_customer_profile'] = array(
    '#type' => 'value',
    '#value' => $shipping_profile,
  );
  
  // Add the field widgets for the profile.
  field_attach_form('commerce_customer_profile', $shipping_profile, $form, $form_state);

  // Tweak the form to remove the fieldset from Shipping address fields.
  $field_name = 'field_shipping_address';
  $language = $form[$field_name]['#language'];

  foreach (element_children($form[$field_name][$language]) as $delta) {
    // Don't mess with the "Add another item" button that could be present.
    if ($form[$field_name][$language][$delta]['#type'] != 'submit') {
      $form[$field_name][$language][$delta]['#type'] = 'container';
    }
    
    if($user->uid) {
      //$form[$field_name][$language][$delta]['name_line']['#default_value'] = fm_users_fullname();
    }
    $form[$field_name][$language][$delta]['name_line']['#weight'] = -6;
    $form[$field_name][$language][$delta]['name_line']['#title'] = t('Full Name');
    $form[$field_name][$language][$delta]['country']['#weight'] = -5;
    $form[$field_name][$language][$delta]['country']['#disabled'] = TRUE;
    
    $form[$field_name][$language][$delta]['postal_code']['#attributes'] = array('class' => array('narrow'));
    $form[$field_name][$language][$delta]['administrative_area']['#attributes'] = array('class' => array('narrow'));

    $form[$field_name][$language][$delta]['thoroughfare']['#title'] = t('Address 1');
    $form[$field_name][$language][$delta]['thoroughfare']['#prefix'] = '<br clear="all">';
    
    $form[$field_name][$language][$delta]['premise']['#title'] = t('Address 2');
    
    $form[$field_name][$language][$delta]['locality']['#prefix'] = '<br clear="all">';
  }
  
 /* $form['saveto'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save To Address Book?'),
    '#default_value' => true
  );*/
  
  /* Add BILLING Profile to Form */
  $billing_profile = commerce_customer_profile_new('billing', $order->uid);
  
  $form['billing_customer_profile'] = array(
    '#type' => 'value',
    '#value' => $billing_profile,
  );
  
  // Add the field widgets for the profile.
  field_attach_form('commerce_customer_profile', $billing_profile, $form, $form_state);

  // Make custom changes to Billing Profile Form
  $field_name = 'commerce_customer_address';
  $language = $form[$field_name]['#language'];

  foreach (element_children($form[$field_name][$language]) as $delta) {
  	if ($form[$field_name][$language][$delta]['#type'] != 'submit') {
      $form[$field_name][$language][$delta]['#type'] = 'container';
    }
    $form[$field_name][$language][$delta]['postal_code']['#attributes'] = array('class' => array('narrow'));
    $form[$field_name][$language][$delta]['administrative_area']['#attributes'] = array('class' => array('narrow'));

    $form[$field_name][$language][$delta]['thoroughfare']['#title'] = t('Address 1');
    $form[$field_name][$language][$delta]['premise']['#title'] = t('Address 2');
  }
  
  /* ADD Credit card form */
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $form['payment_details'] = commerce_payment_credit_card_form(array('code' => '', 'owner' => '' ));
  
  //CHANGE default form theme stuff
  
  $form['payment_details']['credit_card']['owner'] ['#title'] = t('Name on Credit Card');
  $form['payment_details']['credit_card']['owner'] ['#weight'] = -5;
  $form['payment_details']['credit_card']['owner'] ['#default_value'] = isset($form_state['page_values'][1]['credit_card']['owner']) ? $form_state['page_values'][1]['credit_card']['owner'] : '';
  
  $form['payment_details']['credit_card']['exp_month'] ['#attributes'] = array('class' => array('narrow'));
  $form['payment_details']['credit_card']['exp_month'] ['#default_value'] = isset($form_state['page_values'][1]['credit_card']['exp_month']) ? $form_state['page_values'][1]['credit_card']['exp_month'] : '';
  //$form['payment_details']['credit_card']['exp_month'] ['#value'] = '01';
  
  $form['payment_details']['credit_card']['exp_year'] ['#attributes'] = array('class' => array('narrow'));
  $form['payment_details']['credit_card']['exp_year'] ['#default_value'] = isset($form_state['page_values'][1]['credit_card']['exp_year']) ? $form_state['page_values'][1]['credit_card']['exp_year'] : '';
  
  $form['payment_details']['credit_card']['code']['#attributes'] = array('class' => array('narrow'));
  $form['payment_details']['credit_card']['code']['#type'] ='password';
  $form['payment_details']['credit_card']['code']['#suffix'] = '<div style="clear: both; margin-top: -13px; float: left;" title="test" class="dotted-hover">What\'s this?</div>';
  
  $form['payment_details']['credit_card']['number']['#prefix'] = '<div class="text-form-icon-wrapper">';
	$form['payment_details']['credit_card']['number']['#suffix'] = '<div id="lock_markup">
         <img  src="' . pp() . 'lock.png">
         </div>';
	$form['payment_details']['credit_card']['number']['#suffix'] .= '<div><img border="0" style="margin-bottom: 10px;" alt="Credit Card Logos" src="'. pp() .'small_horizontal_creditcards.png"></div>';
	$form['payment_details']['credit_card']['number']['#suffix'] .= '</div>';
  $form['payment_details']['credit_card']['number'] ['#default_value'] = isset($form_state['page_values'][1]['credit_card']['number']) ? $form_state['page_values'][1]['credit_card']['number'] : '';
  
  $form['complete_purchase'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
    '#submit' => array('fm_commerce_express_checkout_form_next_submit'), 
    '#validate' => array('fm_commerce_express_checkout_page_one_validate'),
    '#attributes' => array('class' => array('red', 'ajax-button'),)
  );
  
  
  // Get the path to the module
  $path = drupal_get_path('module', 'fm_commerce_express_checkout');
  //  Attach the CSS and JS to the form
  $form['#attached'] = array(
      'js' => array
      (
          'type' => 'file',
          'data' => $path . '/fm_commerce_express_checkout.js',
      ),
  );
  

  return $form;
  
  
}

function fm_commerce_express_checkout_page_one_validate($form, $form_state) {

  $shipping_profile = $form_state['values']['shipping_customer_profile'];

  // Notify field widgets to validate their data.
  field_attach_form_validate('commerce_customer_profile', $shipping_profile, $form, $form_state);
	
	$profile = $form_state['values']['billing_customer_profile'];

  // Notify field widgets to validate their data.
  field_attach_form_validate('commerce_customer_profile', $profile, $form, $form_state);
  
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array('credit_card'),
  );

  //VAlidate credit card fields
  /*if (!commerce_payment_credit_card_validate($form_state['values']['credit_card'], $settings)) {
    return FALSE;
  }*/

  return TRUE;
}

function fm_commerce_express_checkout_form_next_submit($form, &$form_state) {

  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // and we tell FAPI to rebuild the form.
  $form_state['page_values'][1] = $form_state['values'];

  if (!empty($form_state['page_values'][2])) {
    $form_state['values'] = $form_state['page_values'][2];
  }

  // When form rebuilds, it will look at this to figure which page to build.
  $form_state['page_num'] = 2;
  $form_state['rebuild'] = TRUE;
}

function fm_commerce_express_checkout_form_page_two($form, $form_state) {
	
	$order = $form_state['order'];
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Complete Purchase'), 
    '#submit' => array('fm_commerce_express_checkout_form_submit'),
  );
  $form['edit'] = array(
    '#type' => 'submit', 
    '#value' => t('Edit'), 
    '#submit' => array('fm_commerce_express_checkout_form_edit'),
    '#limit_validation_errors' => array(),
  );
  
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = $order_wrapper->commerce_order_total->value();
  $total = commerce_currency_format($total['amount'], $total['currency_code'], NULL, true);
  $form['complete_purchase_text'] = array(
    '#markup' => 'Your credit card will be charged ' . $total,
  );
  
  $values = $form_state['page_values'][1];
  $shipping_address = $values['field_shipping_address']['und'][0];
  $billing_address = $values['commerce_customer_address']['und'][0];
  $credit_card = $values['credit_card'];
  $form['checkout_summary'] = array(
    '#markup' => theme('fm_commerce_express_checkout_summary', array('shipping_address' => $shipping_address, 'billing_address' => $billing_address, 'credit_card' => $credit_card)),
  );
  return $form;
}

function fm_commerce_express_checkout_form_edit($form, &$form_state) {
	$form_state['values'] = $form_state['page_values'][1];
  $form_state['page_num'] = 1;
  $form_state['rebuild'] = TRUE;
}


function fm_commerce_express_checkout_form_submit($form, $form_state) {
	$form_state['values'] = $form_state['page_values'][1];
	
   // Load a fresh copy of the order stored in the form.
  $order = commerce_order_load($form_state['order']->order_id);
  
  //Get payment methods for credit card
  $order->payment_methods = array();
  rules_invoke_all('commerce_payment_methods', $order);
  
  //There is only one payment method - Authorize.net so just use that one.  
  $payment_method = $order->payment_methods['paypal_wpp|commerce_payment_paypal_wpp'];
  
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  /*Create Account */
  global $user;
  if(!$user->uid) {
  	$first_name = $form_state['values']['first_name'];
  	$last_name = $form_state['values']['last_name'];
  	
  	$edit = array(
          'name' => $first_name + ' ' + $last_name,
          'pass' => $form_state['values']['pass'],
          'mail' => $form_state['values']['mail'],
          'init' => $form_state['values']['mail'],
          'status' => 1,
          'access' => REQUEST_TIME,
          'field_first_name' => array(LANGUAGE_NONE => array(array('value' => $first_name))),
          'field_last_name' => array(LANGUAGE_NONE => array(array('value' => $last_name))),
    );
    $new_user = user_save(drupal_anonymous_user(), $edit);
    $order_wrapper->uid = $new_user->uid;
    $user = $new_user;
  }
  
  
  /*SHIPPING ADDRESS SUBMIT*/
  
  
  /*TODO: ADD more checks besides just address to see if it has changed
  //If Address 1 field is not equal than a different address so save as a new one
  $form_address1 = $form_state['values']['field_shipping_address']['und'][0]['thoroughfare']; 
 
  if(!empty($profile->profile_id) && $form_address1 != $profile->field_shipping_address['und'][0]['thoroughfare']) {
  	$profile = commerce_customer_profile_new('shipping', $order->uid);
  }*/
  
  $profile = $form_state['values']['shipping_customer_profile'];
  // Ensure the profile is active.
  $profile->status = TRUE;

  // Set the profile's uid if it's being created at this time.
  if (empty($profile->profile_id)) {
    $profile->uid = $order->uid;
  }
  // Notify field widgets.
  field_attach_submit('commerce_customer_profile', $profile, $form, $form_state);
  
  commerce_customer_profile_save($profile);
  $order_wrapper->commerce_customer_shipping = $profile;
  
  // Save the profile.
  // $save = $form_state['values']['saveto'];
  
  /*if($save) {
    
  } */
  
   /*BILLING ADDRESS SUBMIT*/
  $billing_profile = $form_state['values']['billing_customer_profile'];

  // Ensure the profile is active.
  $billing_profile->status = TRUE;


  // Set the profile's uid if it's being created at this time.
  if (empty($billing_profile->profile_id)) {
    $billing_profile->uid = $order->uid;
  }

  // Notify field widgets.
  field_attach_submit('commerce_customer_profile', $billing_profile, $form, $form_state);
 
  // Save the profile.
  commerce_customer_profile_save($billing_profile);
  $order_wrapper->commerce_customer_billing = $billing_profile;
	
  commerce_order_save($order);

	//Call payment gateway
	$charge = $order_wrapper->commerce_order_total->value();
	$result = commerce_paypal_wpp_submit_form_submit($payment_method, $form, $form_state['values'], $order, $charge);

	
	if(!is_null($result) && $result == false) {
	 return;
	}
	
	//Settings is captured
	if($payment_method['settings']['txn_type'] == 'authorize') {
		$order = commerce_order_status_update($order, 'fm_orders_authorized');
		fm_commerce_emails_send_order_notifications('fm_orders_authorized', $order);
	} else {
	  $order = commerce_order_status_update($order, 'fm_orders_captured');
	  fm_commerce_emails_send_order_notifications('fm_orders_captured', $order);
	}
	
	commerce_checkout_complete($order);
	
  //Redirect here
  drupal_goto('express-checkout/confirmation', array('query' => array('order-id' => $order->order_id) ));

}


//TODO: Needs to be in a theme file
function theme_fm_commerce_express_checkout_form($variables)
{
	  $output = '';
	  
    // Isolate the form definition form the $variables array
    $form = $variables['form'];
    
    
    if(!isset($form['checkout_summary'])) {
    
      $field_name = 'user_register';
      if (isset($form[$field_name])) {
      	$output .= '<div id="about-you" class="checkoutPanel">';
    	  $output .= '<div class="header rounded-top"><div class="pad">
                    About You
                  </div></div>';
    	  $output .= '<div class="form">';
    	  $output .= ' <div style="" class="register_button fb-auth">Connect With Facebook</div>
        <div class="facebook_connecting" style="display: none;">
<div id="facebook_loader"><img src="' . pp() . 'loader-red.gif"></div>
<div style="margin-top: 10px;" >Connecting with Facebook</div>
</div> <img style="display: block; margin: 19px auto 0;" src="' . pp() . 'divider_or.png"><br clear="all"> ';
    	  $output .= drupal_render($form[$field_name]);
    	  $output .= '</div>';
    	  $output .= '</div>';
      }
    
      $field_name = 'commerce_customer_address';
      $language = $form[$field_name]['#language'];
      
      $output .= '<div id="billing_address" class="checkoutPanel">';
      $output .= '<div class="header rounded-top"><div class="pad">';
      $output .= '
                  Billing Information
                </div></div>';
    
      $output .= '<div id="billing">';
      $output .= '<div class="form">';
      $output .= drupal_render($form['payment_details']); 
      $output .= '</div>';
    
      $output .= '<div class="billingAddress">';
      $output .= drupal_render_children($form[$field_name]); 
      $output .= '</div>';
      $output .= '</div>';
     
      $lock = pp() . 'lock.png';
      $output .= '<div class="securityText rounded-top rounded-bottom"><div class="pad"><img src="' . $lock . '">All transactions are secure and encrypted, and we never store your credit card information. To learn more, please view our ' . l('privacy policy', 'privacy') . '
                  </div></div>';
      
    
      $output .= '</div>';
    
      //DISPLAY Shipping information on Form
      $field_name = 'field_shipping_address';
      $language = $form[$field_name]['#language'];
      
      $output .= '<div id="shipping" class="checkoutPanel">';
      $output .= '<div class="header rounded-top"><div class="pad">
                    Shipping Information
                  </div></div>';
      $output .= '<div class="form">';
      $output .= '<div class="sameAddress"><input checked="checked" type="checkbox" id="edit-billing-info" name="revision" value="1" class="form-checkbox">  <label class="option" for="edit-revision">Same as billing address </label></div>';
      
     // $output .= '<div class="asterik"><span>*</span> = required</div>';
      $output .= drupal_render($form[$field_name]); 
     // $output .= '<div class="saveTo rounded-top rounded-bottom">' . drupal_render($form['saveto']) . '</div>';
      $output .= '</div>';
      
      $output .= '</div>';
      
  
      $logo = pp() . 'paypal_logo.gif';
      $output .= '<div class="checkoutFooter"><div class="completeOrder">';
      $output .= drupal_render($form['complete_purchase']); 
      $output .= '<br clear="all">' .drupal_render_children($form) . '</div>';
      $output .= '<span> Fadmashion express checkout powered by </span>';
      $output .= '<img class="logo" alt="Chase Paymentech" src="' . $logo .'">';
      $output .= '</div>';
    
      //Add hover over for Security Code 
      $cv_card = pp() . 'cv_card.jpg';
      $output .= '<div id="cv-card" style="display: none">' ;
      $output .= '<img height="140px;" alt="" src="' . $cv_card .'">';
      $output .= '</div>';
      
      $options['bt_drupal_help_page'] = array(
        'cssSelect' => '.dotted-hover',
        'trigger' => array('hover'),
	      'positions' => array('right'),
         'fill' =>  "rgb(255, 255, 255)",
	      'contentSelector' => "jQuery('#cv-card').html()",
        'width' => '140px;'
        );
      beautytips_add_beautytips($options);
    } else {
      $output .= '<div id="checkoutSummary" class="checkoutPanel">';
    	$output .= '<div class="header rounded-top"><div class="pad">
    	<div class="dropdown"> ' . drupal_render($form['edit']) . ' </div>
                    Checkout Summary
                  </div></div>';
    	$output .= drupal_render($form['checkout_summary']);
    	$lock = pp() . 'lock.png';
      $output .= '<div class="securityText rounded-top rounded-bottom"><div class="pad"><img src="' . $lock . '">All transactions are secure and encrypted, and we never store your credit card information. To learn more, please view our ' . l('privacy policy', 'privacy') . '
                  </div></div>';
    	$output .= '</div>';
    	
    	$logo = pp() . 'paypal_logo.gif';
      $output .= '<div class="checkoutFooter"><div class="completeOrder">';
      $output .= drupal_render($form['submit']); 
      $output .= '<br clear="all">' .drupal_render_children($form) . '</div>';
      $output .= '<span> Fadmashion express checkout powered by </span>';
      $output .= '<img class="logo" alt="Paypal" src="' . $logo .'">';
      $output .= '</div>';
    }    
    
    // return the output
    return $output;
}

function fm_commerce_express_checkout_profiles_options($type) {
	//<select id="edit-customer-profile-billing-commerce-customer-address-und-0-country" name="customer_profile_billing[commerce_customer_address][und][0][country]" class="form-select required ajax-processed"><option>2310 E. Huntingdon St.</option></select>
  global $user;
	
	$query = db_select('commerce_customer_profile', 'cp');
  $profile_id_alias = $query->addField('cp', 'profile_id');
  $profile_uid_alias = $query->addField('cp', 'uid');
  $profile_type_alias = $query->addField('cp', 'type');
  
  $query->condition('cp.type', array($type), 'IN');
  $query->condition('cp.uid', $user->uid, '=');

  // Execute the query and build the results array.
  $result = $query->execute();

  $loaded_profiles = array();

 
  foreach ($result->fetchAll() as $profile) {
  	$loaded_profiles[] = $profile->profile_id;
  }
  
  //TODO: Optimize query to include entire load in one query
  $profiles = commerce_customer_profile_load_multiple($loaded_profiles);
  
	if(!isset($_GET['shipping'])) {
    $shipping_id = 'new';
  }
  else{
  	$shipping_id = $_GET['shipping'];
  	$shipping_profile = commerce_customer_profile_load($shipping_id);
  }
  
  $output = '<select class="shipping_address_select" id="edit-customer-profile-shipping-commerce-customer-address-und-0-country">';
  foreach($profiles as $id => $profile) {
    $output .= '<option ' . ($shipping_id == $id ? 'selected="selected"' : ''). ' value="' . $id . '">' . $profile->field_shipping_address['und'][0]['thoroughfare'] . '</option>';
  }
  $output .= '<option ' . ($shipping_id == 'new' ? 'selected="selected"' : '') . ' value="new">   ---- New Address ----</option>';
  $output .= '</select>';
  
  drupal_add_js('var full_path = "' . url('express-checkout', array('absolute' => true)) . '";', 'inline');
  
  return $output;
}

function fm_commerce_express_checkout_theme($variables)
{
    return array
    (
        'fm_commerce_express_checkout_login' => array(
	         'template' => 'fm_commerce_express_checkout_login', 
           'variables' => array('forgot_password' => NULL)
         ), 
        'fm_commerce_express_checkout_form' => array(
            'render element' => 'form',
        ),
        'fm_commerce_express_checkout_summary' => array(
          'render element' => 'form',
          'variables' => array('credit_card' => NULL, 'billing_address' => NULL, 'shipping_address' => NULL),
          'template' => 'fm_commerce_express_checkout_summary'
        ),
        'fm_commerce_express_checkout_confirmation' => array(
	        'variables' => array('order' => NULL, 'product_line_items' => NULL, 'totals_line_items' => NULL),
          'template' => 'fm_commerce_express_checkout_confirmation'
        ),
    );
}


//Define The block for the promo code

