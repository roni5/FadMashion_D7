<?php

/**
 * Implements hook_permission().
 */
function fm_commerce_store_permission() {
  $permissions = array(
    'administer stores' => array(
      'title' => t('Administer stores'),
      'description' => t('Allows users to perform any action on stores.'),
    ),
    'administer own stores' => array(
      'title' => t('Administer own stores'),
      'description' => t('Allows user to admistor OWN store.'),
      'restrict access' => TRUE,
    ),
    'access stores' => array(
      'title' => t('Access stores'),
      'description' => t('Allows users to view lists of stores in the Store admin and reference lists.'),
    ),
  );

  return $permissions;
}


function fm_commerce_store_theme() {
	return array(
    'fm_commerce_store_name' => array(
	     'variables' => array(
         'store' => NULL,
	       'beauty_tips' => true
	    )
    ),
    'fm_commerce_store_hover' => array(
      'variables' => array('store' => NULL),
      'template' => 'fm_commerce_store_hover'
    ),
    'fm_commerce_store_commission_breakdown' => array(
      'variables' => array('before_commission' => array(), 'commission' => array(), 'after_commission' => array(), 'total_payment' =>  array() ),
      'template' => 'fm_commerce_store_commission_breakdown'
    )
  );
}

function theme_fm_commerce_store_name($vars) {
	$store = $vars['store'];
	$beauty_tips = $vars['beauty_tips'];
	
	$output = '<div ' . ($beauty_tips ? 'ref="store-info-' . $store->store_id. '"' : '') .  ' class="store-name">' . $store->name . '</div>';
	
	if($beauty_tips) {
	  $logo = field_view_field('fm_commerce_store', $store, 'field_logo', 'node_full');
	  $logo = render($logo);
	  $output .= '<div id="store-info-' . $store->store_id . '" style="display: none">' . $logo . '</div>';
	
	  $options['bt_drupal_help_page'] = array(
      'cssSelect' => '.store-name',
      'trigger' => array('hover', 'click'),
	    'positions' => array('top'),
	    'fill' =>  "rgb(255, 255, 255)",
	    //'ajaxPath' => array("$(this).attr('ref')"),
	    'contentSelector' => " $('#' + $(this).attr('ref')).html()",
	    'width' => '150px',
      'style' => 'hulu',
      );
    beautytips_add_beautytips($options);
	}
    
	return $output;
}

function fm_commerce_store_hover($store_id) {
	$store = fm_commerce_store_load($store_id);
	
	print theme('fm_commerce_store_hover', array('store' => $store));
	exit();
}

/**
 * Implements hook_menu().
 */
function fm_commerce_store_menu() {
  $items = array();
  
  // admin/commerce/stores is defined by Views.
  $items['admin/commerce/stores/add'] = array(
    'title' => 'Add a store',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'fm_commerce_store_add_page',
    'access arguments' => array( 'administer stores'),
    'file' => 'fm_commerce_store.admin.inc',
  );
  $items['admin/commerce/stores/%fm_commerce_store'] = array(
    'title callback' => 'fm_commerce_store_title',
    'title arguments' => array(3),
    'page callback' => 'fm_commerce_store_edit_page',
    'page arguments' => array(3),
    'access arguments' => array( 'administer stores'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'fm_commerce_store.admin.inc',
  );
  $items['admin/commerce/stores/%fm_commerce_store/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -10,
  );
  $items['admin/commerce/stores/%fm_commerce_store/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'fm_commerce_store_form_delete_page',
    'page arguments' => array(3),
    'access arguments' => array('administer stores'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'fm_commerce_store.admin.inc',
    'weight' => 20,
  );
  
  $items['fm_commerce_store/autocomplete'] = array(
    'title' => 'commerce_store autocomplete',
    'page callback' => 'fm_commerce_store_autocomplete',
    'access arguments' => array('access stores'),
    'type' => MENU_CALLBACK,
  );
  
  
   $items['fm_commerce_store/hover'] = array(
    'title' => 'commerce_store_hover',
    'page callback' => 'fm_commerce_store_hover',
    'page arguments' => array(2),
    'access arguments' => array('access stores'),
    'type' => MENU_CALLBACK,
  );
  


  return $items;
}

/**
 * Implements hook_views_api().
 */
function fm_commerce_store_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'fm_commerce_store') . '/views',
  );
}

/**
 * Implements hook_menu_alter().
 */
function fm_commerce_store_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
    $items['admin/commerce/stores/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    $items['admin/commerce/stores/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  
}



/**
 * Menu item title callback: returns the name of a store for its pages.
 *
 * @param $store
 *   The store entity as loaded via the URL wildcard.
 * @return
 *   A page title of the format "Store: [name]".
 */
function fm_commerce_store_title($store) {
  return t('Shop: @name', array('@name' => $store->name));
}

/**
 * Implements hook_entity_info().
 */
function fm_commerce_store_entity_info() {
  $return = array(
    'fm_commerce_store' => array(
      'label' => t('FM Commerce store'),
      'controller class' => 'FMStoreController',
      // Don't let Entity API auto-generate the property info.
      'metadata controller class' => '',
      'uri_callback' => 'fm_commerce_store_uri',
      'module' => 'fm_commerce_store',
      'base table' => 'fm_commerce_store',
      'fieldable' => TRUE,
      'bundles' => array(
        'fm_commerce_store' => array(
          'label' => t('FM Commerce Store'),
          'admin' => array(
            'path' => 'admin/commerce/stores',
            'access arguments' => array('administer stores'),
          ),
        ),
      ),
      'entity keys' => array(
        'id' => 'store_id',
        'label' => 'name',
      ),
    ),
  );

  return $return;
}

function fm_commerce_store_uri($store) {
  return array(
    'path' => 'store/' . $store->store_id,
  );
}

/**
 * Loads a store by ID.
 */
function fm_commerce_store_load($store_id, $reset = FALSE) {
  $stores = fm_commerce_store_load_multiple(array($store_id), array());
  return $stores ? reset($stores) : FALSE;
}

/**
 * Loads multiple stores by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $store_ids
 *   An array of store ids.
 * @param $conditions
 *   (deprecated) An array of conditions on the {commerce_store} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal loading cache.
 *
 * @return
 *   An array of store entities indexed by store_id.
 */
function fm_commerce_store_load_multiple($store_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('fm_commerce_store', $store_ids, $conditions, $reset);
}

function fm_commerce_store_save($store) {
	$store = entity_get_controller('fm_commerce_store')->save($store);
}

class FMStoreController extends DrupalDefaultEntityController {
	public function create() {
		return (object) array(
		  'store_id' => '',
		  'name' => ''
		);
	}
	
	public function save($store) {
		$transaction = db_transaction();
		
		try {
			global $user;
			
			//Determine if store is new
			$store->is_new = empty($store->store_id);
			
			if(empty($store->created)) {
			  $store->created = REQUEST_TIME;
			}
			
			//Give modules the opportunity to prepare field date for saving
			field_attach_presave('fm_commerce_store', $store);
			
			if($store->is_new) {
				$store->uid = $user->uid;
				$store->status = 1;
				
				drupal_write_record('fm_commerce_store', $store);
				$op = 'insert';
			}
			else {
				drupal_write_record('fm_commerce_store', $store, 'store_id');
				$op = 'update';
			}
			
			$function = 'field_attach_' . $op;
			$function('fm_commerce_store', $store);
			
			module_invoke_all('entity_' . $op, $store, 'fm_commerce_store');
			
			unset($store->is_new);
			
			db_ignore_slave();
			
			return $store;
		}
		catch (Exception $e) {
			$transaction->rollback();
			watchdog_exception('fm_commerce_store', $e, NULL, WATCHDOG_ERROR);
			return FALSE;
		}
	} //End save();	
	
	public function delete($store_id) {
		if (!empty($store_id)) {
      $transaction = db_transaction();
      try {
        db_delete('fm_commerce_store')
          ->condition('store_id', array($store_id), 'IN')
          ->execute();

        // Ignore slave server temporarily to give time for the
        // saved product to be propagated to the slave.
        db_ignore_slave();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('fm_commerce_store', $e);
        throw $e;
      }

      // Clear the page and block and product_load_multiple caches.
      cache_clear_all();
      $this->resetCache();
    }

    return TRUE;
	}
	
}

function fm_commerce_store_autocomplete() {
  $field = field_info_field($field_name);

  $matches = array();

  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $tags_typed = drupal_explode_tags($string);
  $tag_last = drupal_strtolower(array_pop($tags_typed));

  if (!empty($tag_last)) {
    $prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';

    // Determine the type of autocomplete match to use when searching.
    $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';

    // Get an array of matching stores.
    //$stores = commerce_offer_match_stores($field, $tag_last, $match, array(), 10);

    // Loop through the products and convert them into autocomplete output.
    foreach ($stores as $store_id => $name) {
      $key = "$name ($store_id)";
      // Names containing commas or quotes must be wrapped in quotes.
      if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
        $key = '"' . str_replace('"', '""', $key) . '"';
      }
      $matches[$prefix . $key] = '<div class="reference-autocomplete">' . $name . '</div>';
    }
  }

  drupal_json_output($matches);
}

/**
 * Fetches an array of all stores matching the given parameters.
 *
 * @param $field
 *   The field description.
 * @param $string
 *   Optional string to filter store names on (used by autocomplete).
 * @param $match
 *   Operator to match filtered store names against, can be any of:
 *   'contains', 'equals', 'starts_with'
 * @param $ids
 *   Optional store ids to lookup (used when $string and $match arguments are
 *   not given).
 * @param $limit
 *   If non-zero, limit the size of the result set.
 *
 * @return
 *   An array of valid stores in the form:
 *   array(
 *     store_id => name,
 *     ...
 *   )
 */
function fm_commerce_match_stores($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = implode(':', array(
    $field['field_name'],
    $match,
    ($string !== '' ? $string : implode('-', $ids)),
    $limit,
  ));

  if (!isset($results[$cid])) {
    $matches = _fm_commerce_match_stores($string, $match, $ids, $limit);

    // Store the results.
    $results[$cid] = !empty($matches) ? $matches : array();
  }

  return $results[$cid];
}



/**
 * Helper function for commerce_offer_match_stores().
 *
 * Returns an array of stores matching the specific parameters.
 */
function _fm_commerce_match_stores($string = '', $match = 'contains', $ids = array(), $limit = NULL) {
  // Build the query object with the necessary fields.
  $query = db_select('fm_commerce_store', 'cs');
  $query->fields('cs', array('store_id', 'name'));

  if ($string !== '') {
    $args = array();

    // Build a where clause.
    switch ($match) {
      case 'contains':
        $operator = 'LIKE';
        $string = '%' . db_like($string) . '%';
        break;
      case 'starts_with':
        $operator = 'LIKE';
        $string = db_like($string) . '%';
        break;
      case 'equals':
      default:
        $operator = '=';
        break;
    }

    $query->condition('name', $string, $operator);
  }
  elseif ($ids) {
    $query->condition('store_id', $ids, 'IN');
  }

  // Order the results by store name.
  $query->orderBy('name');
  // Add a limit if specified.
  if ($limit) {
    $query->range(0, $limit);
  }
  // Execute the query and build the results array.
  $result = $query->execute();

  $matches = array();
  foreach ($result->fetchAll() as $store) {
    $matches[$store->store_id] = check_plain($store->name);
  }

  return $matches;
}

/*
 * Get all the orders for this store
 */
function fm_commerce_store_get_products($store) {
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'commerce_product')
	      ->entityCondition('bundle', 'fm_fashion_product');
	      
	$query->fieldCondition('field_store_reference', 'store_id', $store->store_id);
	      
	$products = $query->execute();
	$products_ret = array();
	if(isset($products['commerce_product'])) {
	  //load orders with the line item and check if cart status is correct
    foreach($products['commerce_product'] as $product_id => $product) {
  	   $products_ret[$product_id] = commerce_product_load($product_id);
	  }
	}
	return $products_ret;
}

/*
 * Get all the orders for this store
 */
function fm_commerce_store_query_orders($store, $status = array('fm_orders_authorized', 'fm_orders_voided', 'fm_orders_captured', 'fm_orders_shipped', 'fm_orders_vendor_paid', 'fm_orders_recieved', 'fm_orders_returned')) {
	$products = fm_commerce_store_get_products($store);
	$pids = array_keys($products);
	if(!count($pids)) {
		return '';
	}
	
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'commerce_line_item')
	      ->entityCondition('bundle', 'product');
	$query->fieldCondition('commerce_product', 'product_id', (array) $pids, 'IN', 0);
	      
	$line_item_results = $query->execute();
	
  $count = 0;
	if(isset($line_item_results['commerce_line_item'])) {
	  //load orders with the line item and check if cart status is correct
    foreach($line_item_results['commerce_line_item'] as $line_item_id => $commerce_line_item) {
  	   $line_item = commerce_line_item_load($line_item_id);
  	   $order = commerce_order_load($line_item->order_id);
  	   
  	   if(in_array($order->status, $status )) {
  	 	  $orders[] = $order;
  	   }
	  }
	}
	
	return $orders;    
}


/*
 * Function to return the amount of payment we need to make to 
 */
function fm_commerce_store_order_display_commission($order, $store) {
	$values = _fm_commerce_store_order_commission_values($order, $store);
  
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = $order_wrapper->commerce_order_total->value();
  
  $before_commission = $values['before_commission'];
  $after_commission = $values['after_commission'];
  $sub_total = $values['sub_total'];
  
  //Calculations
  $commission_val = $values['commission_val'];
  $after_commission_val = $values['after_commission_val'];
  $plus_after_commissions_val = $values['plus_after_commissions_val'];
  
  //Formatted values of Calculations
  $sub_total_formatted = commerce_currency_format($sub_total, $total['currency_code'], NULL, true);
  $commission_formatted = commerce_currency_format($commission_val, $total['currency_code'], NULL, true);
  $after_commission_formatted = commerce_currency_format($after_commission_val, $total['currency_code'], NULL, true);
  $plus_after_commissions_formatted = commerce_currency_format($plus_after_commissions_val, $total['currency_code'], NULL, true);
  
  $commission['sub-total'] = array('price' => $sub_total_formatted);
  $commission['commission'] = array('title' => 'Commission', 'price' => $sub_total_formatted . ' x '. $commission_pct . ' = -<span>' . $commission_formatted . '</span>');
  $commission['after_commission'] = array('title' => 'After commission', 'price' => $after_commission_formatted);
  
  $price = commerce_currency_format($total['amount'], $total['currency_code']);
  $totals[] = theme('fm_commerce_orders_totals_summary', array('title' => 'Total Payment to Designer', 'price' => '<span>' . $plus_after_commissions_formatted . '</span>', 'extra_classes' => 'total'));
  
  $output = theme('fm_commerce_store_commission_breakdown', 
             array('before_commission' => $before_commission, 
                   'commission' => $commission, 
                   'after_commission' => $after_commission, 
                   'total_payment' => $totals)
             );
  return $output;
}

function fm_commerce_store_order_payout_value($order, $store) {
  $values = _fm_commerce_store_order_commission_values($order, $store);
  $plus_after_commissions_val = $values['plus_after_commissions_val'];
  return $plus_after_commissions_val;
}

function fm_commerce_store_order_commission_value($order, $store) {
  $values = _fm_commerce_store_order_commission_values($order, $store);
  $commission_val = $values['commission_val'];
  return $commission_val;
}

/* 
 * Get the value of the balance to FM of the entire shop 
 */
function fm_commerce_store_balance_value($store) {
	$orders = fm_commerce_store_query_orders($store, array('fm_orders_shipped'));
	$balance = 0;
	foreach($orders as $order) {
		 $payout = fm_commerce_store_order_payout_value($order, $store);
		 $balance += $payout;
	}
	return $balance;
}

function _fm_commerce_store_order_commission_values($order, $store) {
  $store_wrapper = entity_metadata_wrapper('fm_commerce_store', $store);
  $commission_pct = floatval($store_wrapper->field_fm_commission->value());
  
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  $before_commission = array();
  $commission = array();  //This is a different format because there are display calculations
  $after_commission = array();
  $totals = array();
  $sub_total = 0;
  $post_total = 0;
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
  
  	switch ($line_item_wrapper->type->value()) {
  		case 'product':
  		case 'deals_discount':
       $before_commission[] = fm_commerce_orders_totals_summary($line_item_wrapper);
       
       $price = $line_item_wrapper->commerce_total->value();
       $sub_total += $price['amount'];
       break;
  		case 'shipping' :
  			$after_commission[] = fm_commerce_orders_totals_summary($line_item_wrapper); 
  			$price = $line_item_wrapper->commerce_total->value();
        $post_total += $price['amount'];
  			break;
  		default:
  			break;
  	}
  }
  
  $total = $order_wrapper->commerce_order_total->value();
  
  //Calculations
  $commission_val = $commission_pct * $sub_total;
  $after_commission_val = $sub_total - $commission_val;
  $plus_after_commissions_val = $after_commission_val + $post_total;
  
 return array('before_commission' => $before_commission, 'after_commission' => $after_commission,
              'sub_total' => $sub_total, 'post_total' => $post_total, 
              'commission_val' => $commission_val, 'after_commission_val' => $after_commission_val, 'plus_after_commissions_val' => $plus_after_commissions_val);
}

