<?php

/**
 * @file
 * Defines a field type for referencing stores.
 */

/**
 * Implements hook_field_extra_fields().
 *
 * This implementation will define "extra fields" on node bundles with store
 * reference fields to correspond with availabled fields on stores. These
 * fields will then also be present in the node view.
 */
function fm_commerce_store_reference_field_extra_fields() {
  $extra = array();
  
  // Loop through the product reference fields attached to node bundles.
  foreach (commerce_info_fields('commerce_product_reference', 'node') as $field_name => $field) {
    foreach ($field['bundles']['node'] as $bundle_name) {
      // Attach "extra fields" to the bundle representing fields on store
      // that may be visible on the bundle.

      foreach (field_info_instances('fm_commerce_store') as $store_bundle_name => $store_fields) {
        foreach ($store_fields as $store_field_name => $store_field) {
          $extra['node'][$bundle_name]['display']['store:' . $store_field_name] = array(
            'label' => t('Store: @label', array('@label' => $store_field['label'])),
            'description' => t('Field from a referenced store.'),
            'weight' => $store_field['widget']['weight'],
          );
        }
      }
    }
  }

  return $extra;
}

/**
 * Implements hook_node_view().
 *
 * This implementation adds store fields to the content array of a node on
 * display if the store contains a non-empty store reference field.
 */
function fm_commerce_store_reference_node_view($node, $view_mode = 'full') {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Loop through product reference fields to see if any exist on this node
  // type's bundle that is either hidden or displayed with the Add to Cart form
  // display formatter.
  foreach (commerce_info_fields('commerce_product_reference', 'node') as $field_name => $field) {
    if (in_array($node->type, $field['bundles']['node'])) {
      // Find the default product based on the cardinality of the field.
      if ($field['cardinality'] == 1) {
        $product = $wrapper->{$field_name}->value();
      }
      else {
        $product = $wrapper->{$field_name}->get(0)->value();
      }
      
      //Load the Store entity from the product 
      $store_ref = field_get_items('commerce_product', $product, 'field_store_reference');
	    $store_id = $store_ref[0]['store_id'];
	    $stores = fm_commerce_store_load_multiple(array($store_id));
	    $store = $stores[$store_id];

      // If a product was found and the reference field is either hidden or set
      // to display as an Add to Cart form...
      if (!empty($product) && (!isset($node->content[$field_name]) ||
        $node->content[$field_name]['#formatter'] == 'commerce_cart_add_to_cart_form')) {

        // Add the display context for these field to the product.
        $product->display_context = array(
          'entity_type' => 'node',
          'entity' => $node,
        );
        // Loop through the fields on the referenced product's type.
        foreach (field_info_instances('fm_commerce_store', 'fm_commerce_store') as $store_field_name => $store_field) {
          // Add the product field to the node's content array.
          $node->content['store:' . $store_field_name] = field_view_field('fm_commerce_store', $store, $store_field_name, 'node_' . $view_mode);

          // For multiple value references, add context information so the cart
          // form can do dynamic replacement of fields.
          if ($field['cardinality'] != 1) {
            $class = array('node', $node->nid, 'store', $store_field_name);

            $node->content['store:' . $store_field_name] += array(
              '#prefix' => '<span class="' . drupal_html_class(implode('-', $class)) . '">',
              '#suffix' => '</span>',
            );
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Remove references to the deleted store in all store reference fields.
 */
function fm_commerce_store_reference_entity_delete($entity, $type) {
  // Only catch deleted store entities.
  if ($type != 'fm_commerce_store') {
    return;
  }
  $store = $entity;

  // Check the data in every store reference field.
  foreach (commerce_info_fields('fm_commerce_store_reference') as $field_name => $field) {
    // Query for any entity referencing the deleted store in this field.
    $query = new EntityFieldQuery();
    $query->fieldCondition($field_name, 'store_id', $store->store_id, '=');
    $result = $query->execute();

    // If results were returned...
    if (!empty($result)) {
      // Loop over results for each type of entity returned.
      foreach ($result as $entity_type => $data) {
        // Load the entities of the current type.
        $entities = entity_load($entity_type, array_keys($data));

        // Loop over each entity and remove the reference to the deleted store.
        foreach ($entities as $entity_id => $entity) {
          $entity = commerce_entity_reference_delete($entity_type, $entity, $field_name, $store->store_id);

          // Store the changes to the entity.
          entity_save($entity_type, $entity);
        }
      }
    }
  }
}

/**
 * Implements hook_field_info().
 */
function fm_commerce_store_reference_field_info() {
  return array(
    'fm_commerce_store_reference' => array(
      'label' => t('Store reference'),
      'description' => t('This field stores the ID of a related store as an integer value.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'options_select',
      'default_formatter' => 'fm_commerce_store_reference_default',
      'property_type' => 'fm_commerce_store',
      'property_callbacks' => array('fm_commerce_store_reference_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'invalid_store_id': store_id is not valid for the field (not a valid
 *                         store id, or the store is not referenceable).
 */
function fm_commerce_store_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Extract store_ids to check.
  $store_ids = array();

  // First check non-numeric store_id's to avoid losing time with them.
  foreach ($items as $delta => $item) {
    if (is_array($item) && !empty($item['store_id'])) {
      if (is_numeric($item['store_id'])) {
        $store_ids[] = $item['store_id'];
      }
      else {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_store_id',
          'message' => t('%name: you have specified an invalid store for this reference field.', array('%name' => $instance['label'])),
        );
      }
    }
  }

  // Prevent performance hog if there are no ids to check.
  if ($store_ids) {
    $refs = fm_commerce_match_stores($field, '', NULL, $store_ids);

    foreach ($items as $delta => $item) {
      if (is_array($item)) {
        if (!empty($item['store_id']) && !isset($refs[$item['store_id']])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'invalid_store_id',
            'message' => t('%name: you have specified an invalid store for this reference field.', array('%name' => $instance['label'])),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function fm_commerce_store_reference_field_is_empty($item, $field) {
  return empty($item['store_id']);
}

/**
 * Implements hook_field_formatter_info().
 */
function fm_commerce_store_reference_field_formatter_info() {
  return array(
    'fm_commerce_store_reference_default' => array(
      'label' => t('Default'),
      'description' => t('Display the name of the referenced store as plain text.'),
      'field types' => array('fm_commerce_store_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function fm_commerce_store_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  // Collect the list of store IDs.
  $store_ids = array();
  foreach ($items as $delta => $item) {
    $store_ids[$item['store_id']] = $item['store_id'];
  }
  $stores = fm_commerce_store_load_multiple($store_ids);

  switch ($display['type']) {
    case 'fm_commerce_store_reference_default':
      foreach ($items as $delta => $item) {
        if (!empty($stores[$item['store_id']])) {
          $result[$delta] = array(
            '#markup' => check_plain($stores[$item['store_id']]->name),
          );
        }
      }
      break;
  }

  return $result;
}

/**
 * Implements hook_field_widget_info().
 *
 * Defines widgets available for use with field types as specified in each
 * widget's $info['field types'] array.
 */
function fm_commerce_store_reference_field_widget_info() {
  $widgets = array();

  // Define an autocomplete textfield widget for store referencing that works
  // like the Term Reference autocomplete widget.
  $widgets['fm_commerce_store_reference_autocomplete'] = array(
    'label' => t('Autocomplete text field'),
    'description' => t('Display the list of referenceable stores as a textfield with autocomplete behaviour.'),
    'field types' => array('fm_commerce_store_reference'),
    'settings' => array(
      'autocomplete_match' => 'contains',
      'size' => 60,
      'autocomplete_path' => 'fm_commerce_store/autocomplete',
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_info_alter().
 */
function fm_commerce_store_reference_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'fm_commerce_store_reference';
  $info['options_buttons']['field types'][] = 'fm_commerce_store_reference';
}

/**
 * Implements hook_field_widget_settings_form().
 */
function fm_commerce_store_reference_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);

  $form = array();

  // Build the settings for the store reference autocomplete widget.
  if ($widget['type'] == 'fm_commerce_store_reference_autocomplete') {
    $form['autocomplete_match'] = array(
      '#type' => 'select',
      '#title' => t('Autocomplete matching'),
      '#default_value' => $settings['autocomplete_match'],
      '#options' => array(
        'starts_with' => t('Starts with'),
        'contains' => t('Contains'),
      ),
      '#description' => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of nodes.'),
    );
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 *
 * Used to define the form element for custom widgets.
 */
function fm_commerce_store_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Define the autocomplete textfield for stores.
  if ($instance['widget']['type'] == 'fm_commerce_store_reference_autocomplete') {
    $store_ids = array();
    $names = array();

    // Build an array of store IDs from this field's values.
    foreach ($items as $item) {
      $store_ids[] = $item['store_id'];
    }

    // Load those stores and loop through them to extract their names.
    $stores = fm_commerce_store_load_multiple($store_ids);

    foreach ($store_ids as $store_id) {
      $name = $stores[$store_id]->name;
      $key = "$name ($store_id)";
      // Names containing commas or quotes must be wrapped in quotes.
      if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
        $key = '"' . str_replace('"', '""', $key) . '"';
      }
      $names[] = $key;
    }

    return $element + array(
      '#type' => 'textfield',
      '#maxlength' => 1024,
      '#default_value' => implode(', ', $names),
      '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $instance['entity_type'] . '/' . $field['field_name'] . '/' . $instance['bundle'],
      '#size' => $instance['widget']['settings']['size'],
      '#element_validate' => array('fm_commerce_store_reference_autocomplete_validate'),
    );
  }
}

/**
 * Validation callback for a commerce_offer_reference autocomplete element.
 */
function fm_commerce_store_reference_autocomplete_validate($element, &$form_state, $form) {
  // If a value was entered into the autocomplete...
  if (!empty($element['#value'])) {
    $stores = drupal_explode_tags($element['#value']);
    $value = array();
    foreach ($stores as $store) {
      // Take "name (store id)', match the id from paranthesis.
      preg_match("/.+\((\d+)\)/", $store, $matches);
      $value[] = $matches[1];
    }
  }
  else {
    $value = array();
  }

  // Update the value of this element so the field can validate the product IDs.
  form_set_value($element, $value, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function fm_commerce_store_reference_field_widget_error($element, $error) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_options_list().
 */
function fm_commerce_store_reference_options_list($field) {
  $options = array();
  // Loop through all store matches.
  foreach (fm_commerce_match_stores($field) as $store_id => $name) {
    $options[$store_id] = $name;
  }
  return $options;
}

/**
 * Implements hook_field_views_data().
 */
function fm_commerce_store_reference_field_views_data($field) {
  $data = field_views_field_default_views_data($field);

  // Build an array of bundles the store reference field appears on.
  $bundles = array();
  foreach ($field['bundles'] as $entity => $bundles) {
    $bundles[] = $entity . ' (' . implode(', ', $bundles) . ')';
  }

  foreach ($data as $table_name => $table_data) {
    foreach ($table_data as $field_name => $field_data) {
      if (!in_array($field_name, array('table', 'entity_id', 'revision_id'))) {
        $data[$table_name][$field_name]['relationship'] = array(
          'title' => t('Referenced store'),
          'help' => t('Appears in: @bundles', array('@bundles' => implode(', ', $bundles))),
          'base' => 'fm_commerce_store',
          'base field' => 'store_id',
          'handler' => 'views_handler_relationship',
          'label' => t('Product'),
        );
      }
    }
  }

  return $data;
}

/**
 * Creates a required, locked instance of a store reference field on the
 * specified bundle.
 *
 * @param $field_name
 *   The name of the field; if it already exists, a new instance of the existing
 *     field will be created. For fields governed by the Commerce modules, this
 *     should begin with commerce_.
 * @param $entity_type
 *   The type of entity the field instance will be attached to.
 * @param $bundle
 *   The bundle name of the entity the field instance will be attached to.
 * @param $label
 *   The label of the field instance.
 * @param $weight
 *   The default weight of the field instance widget and display.
 */
function fm_commerce_store_reference_create_instance($field_name, $entity_type, $bundle, $label, $weight = 0) {
  // If a field type we know should exist isn't found, clear the Field cache.
  if (!field_info_field_types('fm_commerce_store_reference')) {
    field_cache_clear();
  }

  // Look for or add the specified field to the requested entity bundle.
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'fm_commerce_store_reference',
      'cardinality' => 1,
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,

      'label' => $label,
      'required' => TRUE,
      'settings' => array(),

      'widget' => array(
        'type' => 'fm_commerce_store_reference_autocomplete',
        'weight' => $weight,
      ),

      'display' => array(
        'display' => array(
          'label' => 'hidden',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Callback to alter the property info of the reference fields.
 *
 * @see commerce_store_reference_field_info().
 */
function fm_commerce_store_reference_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<commerce_store>' : 'commerce_store';
  $property['options list'] = 'entity_metadata_field_options_list';
  $propery['getter callback'] = 'entity_metadata_field_property_get';
  $property['setter callback'] = 'entity_metadata_field_property_set';
  $property['property info'] = fm_commerce_store_reference_field_data_property_info();

  unset($property['query callback']);
}

/**
 * Defines info for the properties of the Product reference field data structure.
 */
function fm_commerce_store_reference_field_data_property_info($name = NULL) {
  return array(
    'store_id' => array(
      'label' => t('Store ID'),
      'description' => t('The ID of the referenced store.'),
      'type' => 'integer',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
  );
}
