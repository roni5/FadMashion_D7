<?php

/**
* Implementation of hook_menu()
 */
function fm_commerce_store_owners_menu() {
	
	$items['store_owners/admin'] = array(
    'page callback' => 'fm_commerce_store_owners_admin',
	  'access arguments' => array('administer own stores'),
	  'file' => 'fm_commerce_store_owners.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/*
 * implements hook_block_info()
 */
function fm_commerce_store_owners_block_info() {
	$blocks = array();
	
	//Define the Preview Block
	$blocks['fm_store_owners_orders'] = array(
	  'info' => t('Owners - Shop Orders'),
	  'cache' => DRUPAL_NO_CACHE
	);
	$blocks['fm_store_owners_shop'] = array(
	  'info' => t('Owners - Storefront'),
	  'cache' => DRUPAL_NO_CACHE
	);
	$blocks['fm_store_owners_promotions'] = array(
	  'info' => t('Owners - Promotions'),
	  'cache' => DRUPAL_NO_CACHE
	);
	$blocks['fm_store_owners_settings'] = array(
	  'info' => t('Owners - Settings'),
	  'cache' => DRUPAL_NO_CACHE
	);
	return $blocks;
}

/*
 * Implements hook_block_view
 */
function fm_commerce_store_owners_block_view($block_name = '') {
	$store = fm_commerce_store_owners_get_store();
	global $user;
	switch ($block_name) {
		case 'fm_store_owners_orders':
			//$content = theme('fm_commerce_store_owners_orders_admin', array('store' => $store, 'orders' => 'test'));
			$content = fm_commerce_store_owners_orders_list($store);
			break;
		case 'fm_store_owners_shop':
			$products = fm_commerce_store_get_products($store);
			//$content = theme('fm_commerce_store_owners_shop_admin', array('store' => $store));
			break;
		case 'fm_store_owners_promotions':
			
			//$content = theme('fm_commerce_store_owners_promotion_admin', array('store' => $store));
			break;
		case 'fm_store_owners_settings';
		 $content = theme('fm_commerce_store_owners_settings_admin', array('store' => $store));
		  break;
		default:
			break;
	 }
  
	$block = array(
    'content' => $content
  );
  
  return $block;
}

/*
 * Implementation of hook_theme
 */
function fm_commerce_store_owners_theme() {
  return array(
  
    'fm_commerce_store_owners_orders_admin' => array(
       'template' => 'fm_commerce_store_owners_orders_admin',
       'variables' => array('store' => NULL)
    ),
    'fm_commerce_store_owners_settings_admin' => array(
       'template' => 'fm_commerce_store_owners_settings_admin',
       'variables' => array('store' => NULL)
    ),
    'fm_commerce_store_owners_shop_admin' => array(
       'template' => 'fm_commerce_store_owners_shop_admin',
       'variables' => array('store' => NULL)
    ),
    'fm_commerce_store_owners_promotion_admin' => array(
       'template' => 'fm_commerce_store_owners_promotion_admin',
       'variables' => array('store' => NULL)
    ),
    
    
    'fm_commerce_store_owners_demo' => array(
       'template' => 'fm_commerce_store_owners_demo',
       'variables' => array('order' => NULL)
    ),
    
    //Order Status Popups
    'fm_commerce_store_owners_order_void' => array(
       'template' => 'fm_commerce_store_owners_order_void',
       'variables' => array('order' => NULL)
    ),
    'fm_commerce_store_owners_order_captured' => array(
       'template' => 'fm_commerce_store_owners_order_captured',
       'variables' => array('order' => NULL)
    ),
    'fm_commerce_store_owners_order_shipped' => array(
       'template' => 'fm_commerce_store_owners_order_shipped',
       'variables' => array('order' => NULL)
    ),
    'fm_commerce_store_owners_order_paid' => array(
       'template' => 'fm_commerce_store_owners_order_paid',
       'variables' => array('order' => NULL)
    ),
  );	
}




function fm_commerce_store_owners_admin_form() {

	$store = fm_commerce_store_owners_get_store();
	$store_wrapper = entity_metadata_wrapper('fm_commerce_store', $store);
	$mail = $store_wrapper->field_paypal_email->value();
    
	if(!empty($mail)) {
		$form['mail'] = array(
      '#type' => 'textfield', 
      '#size' => 25, 
	    '#maxlength' => 255,
      '#default_value' => $mail,
      '#required' => TRUE,
    );
	} else {
	  $form['mail'] = array(
      '#type' => 'textfield', 
      '#size' => 25, 
	    '#maxlength' => 255,
      '#default_value' => t('Enter Business E-mail'),
      '#required' => TRUE,
		  '#attributes' => array('class' => array('clear-defaults', 'default')),
    );
	}
	
	$form['mail']['#prefix'] = '<div class="text-form-icon-wrapper">';
	$form['mail']['#suffix'] = '<div id="lock_markup">
         <img  src="' . pp() . 'lock.png">
         </div>';
	$form['mail']['#suffix'] .= '</div>';
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Save'),
    '#attributes' => array('class' => array('red', 'ajax-button')),
  );
  
  return $form;
}

function fm_commerce_store_owners_admin_form_validate($form, &$form_state) {
  
	if (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t('Please enter a valid e-mail address.'));
    return;
  }
  
}

function fm_commerce_store_owners_admin_form_submit($form, &$form_state) {
	$store = fm_commerce_store_owners_get_store();
	$store_wrapper = entity_metadata_wrapper('fm_commerce_store', $store);
	$store_wrapper->field_paypal_email = $form_state['values']['mail'];
	entity_get_controller('fm_commerce_store')->save($store);
}

/**
* Fetch the Designer user from the store entity
 */

function fm_commerce_store_owners_get_user($store) {
	
}

/**
* Fetch the store that this user referrs to.  
 */

function fm_commerce_store_owners_get_store($user = null, $reset = FALSE) {
	if(empty($user)) {
		global $user; 
		
		static $store;
		
		if(isset($store) && !$reset) {
			return $store;
		}
	}
	
	$uid = $user->uid;
	
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'fm_commerce_store')
	      ->entityCondition('bundle', 'fm_commerce_store');
	      
	$query->fieldCondition('field_designer_user', 'uid', $user->uid);
	      
	$store_results = $query->execute();
	
	if(empty($store_results)) {
		return FALSE;
	}
	else {
	  foreach($store_results['fm_commerce_store'] as $store_id => $store) {
	  	//Return only the first store id returned;  
	  	$store = fm_commerce_store_load($store_id);
	  	return $store;
	  }
	}
	
}

/**
* Return boolean if the  
 */
function fm_commerce_store_owners_is_admin($user) {
	
	global $user;
	if(!user_access('administer own stores')) {
		return FALSE;
	}
	if(!fm_commerce_store_owners_get_store($user)) {
		return FALSE;
	}
	return TRUE;
}

/*
 * Get the Order list for the shop owners
 */
function fm_commerce_store_owners_orders_list($store = nulll) {
	global $user;
	
	//Second, load up previous orders and go through each one and update those 
 $orders = fm_commerce_store_query_orders($store);
 
 if(count($orders) == 0) {
 //if (true) {
  return '<div class="ownners no-orders">This shop currently doesn\'t have purchases.  
  <a href="javascript:void(0);" onClick="jQuery(\'.ownners.no-orders\').hide(); jQuery(\'.orders-demo\').show(); jQuery.colorbox.resize()">View demo</a></div> ' .
  '<div style="display:none;" class="orders-demo">' . theme('fm_commerce_store_owners_demo') . '</div>'; 	
  
 }
 
 rsort($orders);
 
 $rows = array();
 $header = array('Invoice', 'Details', 'Price' ,'Status' );
 $hidden = '';
	
 foreach($orders as $order) {
		$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
		
 	  $total = $order_wrapper->commerce_order_total->value();
    $total = commerce_currency_format($total['amount'], $total['currency_code'], NULL, true);
  
    $order_view = commerce_order_ui_order_view($order, 'customer');
    
    $row_info = fm_commerce_orders_row_info($order);
		$rows[] = array('<div class="order-number">#' . $order->order_id . '</div><div class="order-date">' . format_date($order->created, 'custom', 'M j') . '</div>', 
		  
		  //'<div class="order-status">' . render($order_view['commerce_customer_billing']) . '</div>',
		  '<div class="product-title">' . $row_info['title'] . '</div> '. theme('fm_commerce_orders_extra_info', array('color' => $row_info['color'], 'size' => $row_info['size'])),  
		  '<div class="sale-price">' . $row_info['sale'] . '</div>',
		  '<div class="order-link" >' . fm_commerce_store_owners_status_link($order) . '</div>',
		);
		$hidden .= fm_commerce_store_owners_order_action($order);
	}
	
	/*
	 * Beauttips call is in fm_on_load.js because we needed to use a preShow function so it had to be moved over 
	 */
	
	$div = '<div id="orders-list">' . theme ('table', array('rows' => $rows, 'header' => $header, 'sticky' => false)) .'</div>';
	$div .= '<div style="display: none">' . $hidden . '</div>';
	
    
	return $div;
}

function fm_commerce_store_owners_order_action($order) {
	$output = '<div id="content-order-' . $order->order_id. '">';
	
	switch ($order->status) {
		case 'fm_orders_voided':
			$output .= theme('fm_commerce_store_owners_order_void', array('order' => $order));
			$output .= theme('fm_commerce_orders_footer', array('no_margin' => true));
			break;
		case 'fm_orders_captured':
		  $output .= theme('fm_commerce_store_owners_order_captured', array('order' => $order));
		  break;
		case 'fm_orders_shipped':
			$output .= theme('fm_commerce_store_owners_order_shipped', array('order' => $order));
			$output .= theme('fm_commerce_orders_footer');
			break;
	  case 'fm_orders_vendor_payed':
			$output .= theme('fm_commerce_store_owners_order_paid', array('order' => $order));
			$output .= theme('fm_commerce_orders_footer');
			break;
		default:
			$output .= theme('fm_commerce_orders_footer', array('no_margin' => true));
			break;
	}
	
	$output .= '</div>';
	return $output;
}

function fm_commerce_store_owners_shipping_company_opts() {
	return  array('fedex' => 'FedEx', 'ups' => 'UPS', 'usps' => 'US Postal');
}
/*
 * Add Store owners Link
 */
function fm_commerce_store_owners_shippment_form($form, $form_state, $order) {

	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  $tracking_id = $order_wrapper->field_tracking_id->value();
  $tracking_company = $order_wrapper->field_tracking_company->value();
  
  $form['delivery_service'] = array(
      '#type' => 'select',
      '#options' => fm_commerce_store_owners_shipping_company_opts(),
      '#default_value' => isset($tracking_company) ? $tracking_company : 'fedex',
    );
  $form['tracking'] = array(
    '#type' => 'textfield',
    '#size' => 25, 
	  '#maxlength' => 255,
    '#default_value' => isset($tracking_id) ? $tracking_id: t('Enter Tracking ID'),
    '#attributes' => array('class' => array('clear-defaults')),
    '#required' => TRUE
  );
  $form['order_id'] = array('#type' => 'value', '#value' => $order->order_id);
    
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Submit'),
    '#attributes' => array('class' => array('ajax-button', 'red')),
  );
  
  return $form;
}

function fm_commerce_store_owners_shippment_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  
  $order_id =  $values['order_id'];
  
  $order = commerce_order_load($order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_wrapper->field_tracking_id->set($values['tracking']);
  $order_wrapper->field_tracking_company->set($values['delivery_service']);
  $order_wrapper->save();
  commerce_order_status_update($order, 'fm_orders_shipped');
  
	drupal_set_message('The Tracking ID has been updated for order #' . $order_id . '.  We will be in touch with confirmation of payment shortly.' );
}

/*
 * Add Store owners Link
 */
function fm_commerce_store_owners_status_link($order) {
	$text = '';

	switch($order->status) {
		case 'fm_orders_voided':
			$text = '<span ref="order-' . $order->order_id. '" class="dotted-hover">Order is Void</span>';
			return $text;
		  break;
		case 'fm_orders_authorized':
			$text = '<span ref="order-' . $order->order_id. '" class="dotted-hover">Authorized, Needs to be Captured</span>';
			return $text;
		  break;
		case 'fm_orders_captured':
			$text = '<span ref="order-' . $order->order_id. '" class="dotted-hover">Ready to be Shipped</span>';
			return $text;
		  break;
		case 'fm_orders_shipped':
			$text = '<span ref="order-' . $order->order_id. '" class="dotted-hover">Shipped, Waiting for Payment</span>';
			return $text;
		  break;
		case 'fm_orders_vendor_payed':
			$text = '<span ref="order-' . $order->order_id. '" class="dotted-hover">Transaction Complete!</span>';
			return $text;
		  break;
		case 'fm_orders_recieved':
			$text = '<span ref="order-' . $order->order_id. '" class="dotted-hover">Customer Recieved Order</span>';
			return $text;
		  break;
		case 'fm_orders_returned':
			$text = '<span ref="order-' . $order->order_id. '" class="dotted-hover">Return Request</span>';
			return $text;
		  break;
		default:
			$text = '';
		  break;
			
	}
	
	return $text;
	//return l($text, 'my-orders/' . $order->order_id, array( 'query' => array('width' => '940px'), 'html' => true, 'attributes' => array( 'class' => 'colorbox-load', )));
	
}
