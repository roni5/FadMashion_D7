<?php

require_once dirname(__FILE__) . '/relation.field.inc';

/**
 * @file
 * Describes relations between entities.
 */

/**
 * Implements hook_entity_info().
 */
function relation_entity_info() {
  $entities['relation'] = array(
    'label' => t('Relation'),
    'base table' => 'relation',
    'revision table' => 'relation_revision',
    'fieldable' => TRUE,
    'controller class' => 'DrupalDefaultEntityController',
    'uri callback' => 'relation_uri',
    'entity keys' => array(
      'id' => 'rid',
      'revision' => 'vid',
      'bundle' => 'predicate',
      'label' => 'rid',
    ),
    'bundle keys' => array(
      'bundle' => 'predicate',
    ),
    'bundles' => array(),
    'view modes' => array(),
  );
  foreach (relation_get_types() as $type => $info) {
    $entities['relation']['bundles'][$type] = (array) $info;
    $entities['relation']['bundles'][$type]['admin'] = array(
      'path' => 'admin/structure/relation/manage/%relation_type',
      'real path' => 'admin/structure/relation/manage/' . $type,
      'bundle argument' => 4,
      'access arguments' => array('administer relation types'),
    );
  }
  return $entities;
}

/**
 * Implements hook_permission().
 */
function relation_permission() {
  return array(
    'administer relation types' => array(
      'title' => t('Administer Relation types'),
      'description' => t('Create, edit, delete, and perform administration tasks for relation types.'),
    ),
    'create relations' => array(
      'title' => t('Create Relations'),
      'description' => t('Create Relations between entities.'),
    ),
    'edit relations' => array(
      'title' => t('Edit Relations'),
      'description' => t('Edit fields on existing relations.'),
    ),
    'delete relations' => array(
      'title' => t('Delete Relations'),
      'description' => t('Delete existing relations.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function relation_menu() {
  $items['relation/%relation'] = array(
    'title callback' => 'relation_page_title',
    'title arguments' => array(1),
    'access arguments' => array('access content'),
    'page callback' => 'relation_page',
    'page arguments' => array(1),
  );
  $items['relation/%relation/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['relation/%relation/edit'] = array(
    'title' => 'Edit',
    'access arguments' => array('edit relations'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relation_edit_form', 1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['relation/%relation/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relation_delete_confirm', 1),
    'access arguments' => array('delete relations'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/relation'] = array(
    'title' => 'Relation',
    'access arguments' => array('administer relation types'),
    'page callback' => 'relation_list',
    'file' => 'relation.admin.inc',
  );
  $items['admin/structure/relation/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/relation/add'] = array(
    'title' => 'Add',
    'access arguments' => array('administer relation types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relation_type_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'relation.admin.inc',
  );
  $items['admin/structure/relation/manage/%relation_type'] = array(
    'title' => 'Edit relation type',
    'access arguments' => array('administer relation types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relation_type_form', 4),
    'type' => MENU_CALLBACK,
    'file' => 'relation.admin.inc',
  );
  $items['admin/structure/relation/manage/%relation_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/relation/manage/%relation_type/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('relation_type_delete_confirm', 4),
    'access arguments' => array('administer relation types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'relation.admin.inc',
    'weight' => 10,
  );
  $items['relation/autocomplete/bundles'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page callback' => 'relation_predicate_autocomplete',
  );
  return $items;
}

/**
 * Saves a relation bundle.
 *
 * @param $record
 *   Array containing:
 *   - predicate: Relation type machine name (string).
 *   - label: Relation type human-readable name (string).
 *   - directional: whether relation is directional (boolean) .
 *   - transitive: whether relation is transitive (boolean).
 *   - min_arity: minimum number of entities in relations of this type (int>=2).
 *   - max_arity: maximum number of entities in relations of this type (int>=min_arity).
 *   - source_bundles: array containing allowed bundle keys. This is used for
 *     both directional and non-directional relations. Bundle key arrays are
 *     of the form 'entity:bundle', eg. 'node:article', or 'entity:*' for all
 *     bundles of the type.
 *   - target_bundles: array containing arrays allowed target bundle keys.
 *     This is the same format as source_bundles, but is only used for
 *     directional relations.
 * @param $write_record_keys
 *   Array containing the primary key of the relation ('predicate'), if we are
 *   updating a relation, or an empty array if we are creating a new relation.
 */
function relation_type_save($record, $write_record_keys = array()) {
  $record += array(
    'min_arity' => 2,
    'max_arity' => 2,
    'directional' => FALSE,
    'transitive' => FALSE,
  );
  $source_bundles = $record['source_bundles'];
  if ($record['directional']) {
    $target_bundles = $record['target_bundles'];
  }
  unset($record['source_bundles'], $record['target_bundles']);
  $predicate = $record['predicate'];
  $transaction = db_transaction();
  drupal_write_record('relation_type', $record, $write_record_keys);
  db_delete('relation_bundles')->condition('predicate', $predicate)->execute();
  $query = db_insert('relation_bundles')->fields(array('predicate', 'entity_type', 'bundle', 'r_index'));
  foreach ($source_bundles as $entity_bundles) {
    list($entity_type, $bundle) = explode(':', $entity_bundles, 2);
    $query->values(array($predicate, $entity_type, $bundle, 0));
  }
  if ($record['directional']) {
    foreach ($target_bundles as $entity_bundles) {
      list($entity_type, $bundle) = explode(':', $entity_bundles, 2);
      $query->values(array($predicate, $entity_type, $bundle, 1));
    }
  }
  $query->execute();
  $instance = array(
    'field_name' => 'endpoints',
    'entity_type' => 'relation',
    'bundle' => $predicate,
  );
  field_create_instance($instance);
  field_info_cache_clear();
}

/**
 * Loads a relation type (bundle).
 *
 * @param $predicate
 *   The machine name of the relation type (bundle) to be loaded.
 *
 * @return
 *   A relation type record (as an Array) in the same format as expected by
 *   relation_type_save().
 */
function relation_type_load($predicate) {
  $types = relation_get_types($predicate);
  return isset($types[$predicate]) ? $types[$predicate] : FALSE;
}

/**
 * Loads a relation type (bundle), or all relation bundles.
 *
 * @param $predicate
 *   The machine name of the relation type (bundle) to be loaded. If $predicate
 *   is NULL, load all relation entity types.
 *
 * @return
 *   A an array of relation type records in the same format as expected by
 *   relation_type_save(), keyed by predicate.
 */
function relation_get_types($predicate = NULL) {
  $query = db_select('relation_type', 'rt')
    ->fields('rt', array('predicate', 'label', 'directional', 'transitive', 'min_arity', 'max_arity'));
  if ($predicate) {
    $query->condition('predicate', $predicate);
  }
  $results = $query->execute();
  $relation_types = array();
  foreach ($results as $relation_type) {
    $relation_type->source_bundles = array();
    $relation_type->target_bundles = array();
    foreach (db_query('SELECT predicate, entity_type, bundle, r_index  FROM {relation_bundles} WHERE predicate = :predicate', array(':predicate' => $relation_type->predicate)) as $record) {
      $endpoint = $record->r_index ? 'target_bundles' : 'source_bundles';
      $relation_type->{$endpoint}[] = "$record->entity_type:$record->bundle";
    }
    $relation_types[$relation_type->predicate] = $relation_type;
  }
  return $relation_types;
}

/**
 * Deletes a relation type (bundle).
 *
 * @param $predicate
 *   The machine name of the relation type (bundle) to be deleted.
 */
function relation_type_delete($predicate) {
  db_delete('relation_type')->condition('predicate', $predicate)->execute();
  db_delete('relation_bundles')->condition('predicate', $predicate)->execute();
}

/**
 * Loads a relation from a relation id.
 *
 * @param $rid
 *   Numerical id of the relation to be loaded.
 *
 * @return
 *   Loaded relation object. Relation objects are stdClass Object of the form:
 *   - rid: numeric relation id.
 *   - predicate: relation bundle machine name.
 *   - arity: the number of entities in the relation
 *   - rdf_mapping: not yet implemented (empty array)
 *   - endpoints: Field holding the entities that make up the relation.
 *     Field columns are:
 *     - entity_type: The type of the entity (eg. node).
 *     - entity_id: Numeric entity ID.
 */
function relation_load($rid, $vid = NULL, $reset = FALSE) {
  $conditions = (isset($vid) ? array('vid' => $vid) : array());
  $relations = relation_multiple_load(array($rid), $conditions);
  return reset($relations);
}

/**
 * Loads a set of relations from an array of relation ids.
 *
 * @param $rids
 *   Array of numerical relation ids of the relations to be loaded.
 *
 * @return
 *   Associative array of loaded relation objects, keyed by relation id.
 *
 * @see relation_load()
 */
function relation_multiple_load($rids, $conditions = array(), $reset = FALSE) {
  // Entity load handles field_attach_load for us.
  return entity_load('relation', $rids, $conditions);
}

/**
 * Relation display page. Currently only displays related entities.
 *
 * @TODO: implement directionality, possibly give more details on entities?
 */
function relation_page($relation) {
  $view_mode = 'full';
  $entity_type = 'relation';
  $entity = $relation;
  $entities = array($relation->rid => $relation);

  field_attach_prepare_view($entity_type, $entities, $view_mode);
  entity_prepare_view($entity_type, $entities);
  $build = field_attach_view($entity_type, $entity, $view_mode);
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode);
  drupal_alter('entity_view', $build, $entity_type);
  return $build;
}

/**
 * Relation display page title.
 */
function relation_page_title($relation) {
  return 'Relation ' . $relation->rid;
}

/**
 * Relation edit form.
 */
function relation_edit_form($form, &$form_state, $relation) {
  $form_state['relation'] = $relation;
  field_attach_form('relation', $relation, $form, $form_state);
  $form['actions']['#weight'] = 100;
  $form['actions']['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function relation_edit_form_submit($form, $form_state) {
  $relation = $form_state['relation'];
  entity_form_submit_build_entity('relation', $relation, $form, $form_state);
  relation_save($relation);
}

/**
 * Creates a relation from a predicate and a set of endpoints.
 *
 * @param $predicate
 *   The relation type (bundle) of the relation to be created.
 * @param $endpoints
 *   A list of endpoints. Each endpoint is an associate array
 *
 * @return
 *   The new relation id.
 */
function relation_create($predicate, $endpoints) {
  global $user;
  $relation = new stdClass();
  $relation->is_new = TRUE;
  $relation->predicate = $predicate;
  $relation->uid = $user->uid;
  $relation->endpoints[LANGUAGE_NONE] = $endpoints;
  return relation_save($relation);
}

/**
 * Saves a relation.
 *
 * @param $relation
 *   The relation entity data object. See relation_create() for the appropriate
 *   format (or just use it).
 *
 * @return
 *   The new relation id.
 */
function relation_save($relation) {
  $errors = array();
  try {
    field_attach_validate('relation', $relation);
  }
  catch (FieldValidationException $e) {
    return FALSE;
  }
  $relation->arity = count($relation->endpoints[LANGUAGE_NONE]);
  // use time() instead of REQUEST_TIME, because otherwise tests
  // RelationQuery::order() are impossible
  $current_time = time();
  field_attach_presave('relation', $relation);
  module_invoke_all('entity_presave', $relation, 'relation');

  if (!empty($relation->is_new)) {
    $relation->rid = db_insert('relation')
      ->useDefaults(array('rid'))
      ->fields(array(
        'predicate' => $relation->predicate,
        'arity'     => $relation->arity,
        'uid'       => $relation->uid,
        'created'   => $current_time,
        'changed'   => $current_time,
      ))
      ->execute();
    $relation->revision = TRUE;
  }
  if (!empty($relation->revision)) {
    $vid = db_insert('relation_revision')
      ->useDefaults(array('vid'))
      ->fields(array(
        'rid' => $relation->rid,
        'predicate'   => $relation->predicate,
        'arity'       => $relation->arity,
        'uid'         => $relation->uid,
        'changed'     => $current_time,
      ))
      ->execute();
      $relation->vid = $vid;

    // These are the only fields that we allow updating.
    db_update('relation')
      ->condition('rid', $relation->rid)
      ->fields(array(
        'vid'     => $relation->vid,
        'uid'     => $relation->uid,
        'changed' => $current_time,
        ))
      ->execute();
  }
  if (empty($relation->is_new) && empty($relation->revision)) {
    // These are the only updatable columns.
    db_update('relation')
      ->condition('rid', $relation->rid)
      ->fields(array(
        'uid'       => $relation->uid,
        'changed'   => $current_time,
        ))
      ->execute();
  }

  if (!empty($relation->is_new)) {
    field_attach_insert('relation', $relation);
    module_invoke_all('entity_insert', $relation);
  }
  else {
    field_attach_update('relation', $relation);
    module_invoke_all('entity_update', $relation);
  }

  return $relation->rid;
}

/**
 * Deletes a relation.
 *
 * @param $rid
 *   The numeric id of the relation to be deleted.
 */
function relation_delete($rid) {
  relation_multiple_delete(array($rid));
}

/**
 * Deletes a relation.
 *
 * @param $rid
 *   An array of numeric ids of the relation to be deleted.
 */
function relation_multiple_delete($rids) {
  $relations = relation_multiple_load($rids);
  foreach ($relations as $rid => $relation) {
    db_delete('relation')->condition('rid', $rid)->execute();
    module_invoke_all('entity_delete', $relation, 'relation');
    field_attach_delete('relation',  $relations);
  }
}

/**
 * Autocomplete page for listing bundles.
 */
function relation_predicate_autocomplete($string = '') {
  $like_string = db_like($string) . '%';
  $result = db_select('relation_type', 'rt')
    ->fields('rt', array('predicate', 'label'))
    ->condition(db_or()
      ->condition('predicate', $like_string, 'LIKE')
      ->condition('label', $like_string, 'LIKE'))
    ->range(0, 10)
    ->execute();
  $matches = array();
  foreach ($result as $row) {
    $matches[$row->predicate] = $row->label;
  }
  drupal_json_output($matches);
}

/**
 * Menu callback: ask for confirmation of relation deletion
 */
function relation_delete_confirm($form, &$form_state, $relation) {
  $form['#relation'] = $relation;
  // Always provide entity id in the same form key as in the entity edit form.
  $form['rid'] = array('#type' => 'value', '#value' => $relation->rid);
  return confirm_form($form,
    t('Are you sure you want to delete relation %rid?', array('%rid' => $relation->rid)),
    'relation/' . $relation->rid,
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Execute relation deletion
 */
function relation_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $relation = $form['#relation'];
    relation_delete($form_state['values']['rid']);
    watchdog('relation', '@type: deleted %title.', array('@type' => $relation->predicate, '%title' => $relation->rid));
    drupal_set_message(t('@type %title has been deleted.', array('@type' => $relation->predicate, '%title' => $relation->rid)));
  }

  $form_state['redirect'] = '<front>';
}

/**
 * get a relation's URI.
 *
 * @see entity_uri()
 */
function relation_uri($relation) {
  return array('path' => 'relation/' . $relation->rid);
}

/**
 * Returns a query object to find related entities.
 *
 * @param $entity_type
 *   The entity type of one of the endpoints.
 * @param $entity_id
 *   The entity id of one of the endpoints.
 *
 *
 * @return RelationQuery
 *   The query object itself.
 */
function relation_query($entity_type  = NULL, $entity_id = NULL, $index = NULL) {
  return new RelationQuery($entity_type, $entity_id, $index);
}

/**
 * Implements hook_entity_delete.
 */
function relation_entity_delete($entity, $entity_type) {
  list($id) = entity_extract_ids($entity_type, $entity);
  $relations = relation_query($entity_type, $id)->execute();
  relation_multiple_delete(array_keys($relations));
  drupal_set_message(t('Relations !relations have been deleted.', array('!relations' => implode(', ', array_keys($relations)))));
}

/**
 * Implements hook_views_api().
 */
function relation_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'relation') . '/views',
  );
}
