<?php

/**
 * @file
 * Installation functions for Relation module.
 */

/**
 * Implements hook_install().
 */
function relation_install() {
  // First, add relation to the module list.
  $module_list = module_list();
  $module_list['relation']['filename'] = dirname(__FILE__)  . '/relation.module';
  module_list(TRUE, FALSE, FALSE, $module_list);
  // Next, clear the module_implements() cache.
  module_implements('', FALSE, TRUE);
  // Finally, clear the field info cache. This way we can create a field our
  // own module defines.
  field_info_cache_clear();
  $field = array(
    'field_name' => 'endpoints',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'type' => 'relation_endpoint'
  );
  field_create_field($field);
}

/**
 * Implements hook_schema().
 */
function relation_schema() {
  $schema['relation'] = array(
    'description' => 'Keeps track of relation entities.',
    'fields' => array(
      'rid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Unique relation id (entity id).',
      ),
      'predicate' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Relation type (see relation_type table).',
      ),
      'vid' => array(
        'description' => 'The current {relation_revision}.vid version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this relation; initially, this is the user that created it.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the relation was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the relation was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'arity' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The number rows in this relation. Cannot exceed max_arity, or be less than min_arity in relation_type table.',
      ),
    ),
    'primary key' => array('rid'),
    'indexes' => array(
      'predicates' => array('predicate', 'rid'),
    ),
  );
  $schema['relation_revision'] = array(
    'description' => 'Keeps track of relation entities.',
    'fields' => array(
      'rid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unique relation id (entity id).',
      ),
      'predicate' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Relation type (see relation_type table).',
      ),
      'vid' => array(
        'description' => 'The current {relation_revision}.vid version identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this relation; initially, this is the user that created it.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the relation was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'arity' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The number rows in this relation. Cannot exceed max_arity, or be less than min_arity in relation_type table.',
      ),
    ),
    'primary key' => array('vid'),
    'indexes' => array(
      'rid_vid' => array('rid', 'vid'),
    ),
  );
  $schema['relation_type'] = array(
    'description' => 'Relation settings.',
    'fields' => array(
      'predicate' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The machine-readable name of this type.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The human-readable name of this type.',
      ),
      'directional' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether this relation type is directional. If not, all indexes are ignored.',
      ),
      'transitive' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether this relation type is transitive.',
      ),
      'min_arity' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 2,
        'description' => 'The minimum number of rows that can make up a relation of this type.',
      ),
      'max_arity' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 2,
        'description' => 'The maximum number of rows that can make up a relation of this type. Similar to field cardinality.',
      ),
    ),
    'primary key' => array('predicate'),
  );
  $schema['relation_bundles'] = array(
    'description' => 'Relation type available bundles',
    'fields' => array(
      'predicate' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The relation type.',
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Entity type that is available to this relation.',
      ),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Entity bundle that is available to this relation.',
      ),
      'r_index' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Direction index for relations: 0=from, 1=to. The index is ignored if the directional column in the relation_type table is 0.',
      ),
    ),
  );
 return $schema;
}

/**
 * Implements hook_field_schema().
 */
function relation_field_schema() {
  $columns = array(
    'entity_type' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
      'description' => 'Entity_type of this relation end-point.',
    ),
    'entity_id' => array(
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      'description' => 'Entity_id of this relation end-point.',
    ),
    'r_index' => array(
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      'description' => 'The index of this row in this relation. The highest index in the relation is stored as "arity" in the relation table.',
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => array(
      'entity' => array('entity_type', 'entity_id'),
    ),
  );
}
