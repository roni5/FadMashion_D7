<?php

/**
 * @file
 * Implements Authorize.Net payment services for use in Drupal Commerce.
 */

// Authorize.Net transaction mode definitions:
define('AUTHNET_TXN_MODE_LIVE', 'live');
define('AUTHNET_TXN_MODE_LIVE_TEST', 'live_test');
define('AUTHNET_TXN_MODE_DEVELOPER', 'developer');


/**
 * Implements hook_menu().
 */
function commerce_authnet_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/authnet-aim-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_authnet_aim_capture_form', 3, 5),
    'access callback' => 'commerce_authnet_aim_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_authnet.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the prior authorization capture form for Authorize.Net
 *   AIM credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_authnet_aim_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Authorize.Net AIM or isn't
  // awaiting capture.
  if ($transaction->payment_method != 'authnet_aim' || strtoupper($transaction->remote_status) != 'AUTH_ONLY') {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }

  // Allow access if the user can update payments on this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_authnet_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['authnet_aim'] = array(
    'base' => 'commerce_authnet_aim',
    'title' => t('Authorize.Net AIM - Credit Card'),
    'short_title' => t('Authorize.Net CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates Authorize.Net Advanced Integration Method for card not present CC transactions.'),
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_authnet_aim_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'login' => '',
    'tran_key' => '',
    'txn_mode' => AUTHNET_TXN_MODE_LIVE_TEST,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'email_customer' => FALSE,
    'log' => array('request' => '0', 'response' => '0'),
  );

  $form['login'] = array(
    '#type' => 'textfield',
    '#title' => t('API Login ID'),
    '#description' => t('Where this can be found.'),
    '#default_value' => $settings['login'],
    '#required' => TRUE,
  );
  $form['tran_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Key'),
    '#description' => t('Where this can be found.'),
    '#default_value' => $settings['tran_key'],
    '#required' => TRUE,
  );
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.') . '<br />' . t('Only specify a developer test account if you login to your account through https://test.authorize.net.'),
    '#options' => array(
      AUTHNET_TXN_MODE_LIVE => t('Live transactions in a live account'),
      AUTHNET_TXN_MODE_LIVE_TEST => t('Test transactions in a live account'),
      AUTHNET_TXN_MODE_DEVELOPER => t('Developer test account transactions'),
    ),
    '#default_value' => $settings['txn_mode'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );
  $form['email_customer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tell Authorize.net to e-mail the customer a receipt based on your account settings.'),
    '#default_value' => $settings['email_customer'],
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_authnet_aim_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  return commerce_payment_credit_card_form(array('code' => ''));
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_authnet_aim_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_authnet_aim_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Build a name-value pair array for this transaction.
  $nvp = array(
    'x_type' => commerce_authnet_txn_type($payment_method['settings']['txn_type']),
    'x_method' => 'CC',
    'x_amount' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
    'x_card_num' => $pane_values['credit_card']['number'],
    'x_exp_date' => $pane_values['credit_card']['exp_month'] . $pane_values['credit_card']['exp_year'],
  );

  if (isset($pane_values['credit_card']['code'])) {
    $nvp['x_card_code'] = $pane_values['credit_card']['code'];
  }

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  // Add additional transaction invormation to the request array.
  $nvp += array(
    // Order Information
    'x_invoice_num' => $order->order_number,
    'x_description' => substr(implode(', ', $description), 0, 255),

    // Customer Information
    'x_first_name' => substr($billing_address['first_name'], 0, 50),
    'x_last_name' => substr($billing_address['last_name'], 0, 50),
    'x_company' => substr($billing_address['organisation_name'], 0, 50),
    'x_address' => substr($billing_address['thoroughfare'], 0, 60),
    'x_city' => substr($billing_address['locality'], 0, 40),
    'x_state' => substr($billing_address['administrative_area'], 0, 40),
    'x_zip' => substr($billing_address['postal_code'], 0, 20),
    'x_country' => $billing_address['country'],
    'x_email' => substr($order->mail, 0, 255),
    'x_cust_id' => substr($order->uid, 0, 20),
    'x_customer_ip' => substr(ip_address(), 0, 15),
  );

  // Submit the request to Authorize.Net.
  $response = commerce_authnet_aim_request($payment_method, $nvp);

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('authnet_aim', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response[6];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $response;

  // If we didn't get an approval response code...
  if ($response[0] != '1') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($payment_method['settings']['txn_type']) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = $response[11];

  // Build a meaningful response message.
  $message = array(
    '<b>' . commerce_authnet_reverse_txn_type($response[11]) . '</b>',
    '<b>' . ($response[0] != '1' ? t('REJECTED') : t('ACCEPTED')) . ':</b> ' . check_plain($response[3]),
    t('AVS response: @avs', array('@avs' => commerce_authnet_avs_response($response[5]))),
  );

  // Add the CVV response if enabled.
  if (isset($nvp['x_card_code'])) {
    $message[] = t('CVV match: @cvv', array('@cvv' => commerce_authnet_cvv_response($response[38])));
  }

  $transaction->message = implode('<br />', $message);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($response[0] != '1') {
    drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
    drupal_set_message(check_plain($response[3]), 'error');
    return FALSE;
  }
}

/**
 * Submits an AIM API request to Authorize.Net.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_authnet_aim_request($payment_method, $nvp = array()) {
  // Get the API endpoint URL for the method's transaction mode.
  $url = commerce_authnet_aim_server_url($payment_method['settings']['txn_mode']);

  // Add the default name-value pairs to the array.
  $nvp += array(
    // API credentials
    'x_login' => $payment_method['settings']['login'],
    'x_tran_key' => $payment_method['settings']['tran_key'],
    'x_version' => '3.1',

    // Extra administrative values
    'x_test_request' => $payment_method['settings']['txn_mode'] == AUTHNET_TXN_MODE_LIVE_TEST ? 'TRUE' : 'FALSE',
    'x_delim_data' => 'TRUE',
    'x_delim_char' => '|',
    'x_encap_char' => '"',
    'x_relay_response' => 'FALSE',
    'x_email_customer' => $payment_method['settings']['email_customer'],
  );

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_authnet_aim_request', $nvp);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {
    // Mask the credit card number and CVV.
    $log_nvp = $nvp;
    $log_nvp['x_login'] = str_repeat('X', strlen($log_nvp['x_login']));
    $log_nvp['x_tran_key'] = str_repeat('X', strlen($log_nvp['x_tran_key']));

    if (!empty($log_nvp['x_card_num'])) {
      $log_nvp['x_card_num'] = str_repeat('X', strlen($log_nvp['x_card_num']) - 4) . substr($log_nvp['x_card_num'], -4);
    }

    if (!empty($log_nvp['x_card_code'])) {
      $log_nvp['x_card_code'] = str_repeat('X', strlen($log_nvp['x_card_code']));
    }

    watchdog('commerce_authnet', 'Authorize.Net AIM request to @url: !param', array('@url' => $url, '!param' => '<pre>' . check_plain(print_r($log_nvp, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Prepare the name-value pair array to be sent as a string.
  $pairs = array();

  foreach ($nvp as $key => $value) {
    $pairs[] = $key . '=' . urlencode($value);
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $pairs));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_authnet', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // Make the response an array and trim off the encapsulating characters.
  $response = explode('|', $result);

  for ($i = 0; $i < count($response); $i++) {
    $response[$i] = substr($response[$i], 1, strlen($response[$i]) - 2);
  }

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_authnet', 'Authorize.Net AIM response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  return $response;
}

/**
 * Returns the URL to the Authorize.Net server determined by transaction mode.
 *
 * @param $txn_mode
 *   The transaction mode that relates to the live or test server.
 *
 * @return
 *   The URL to use to submit requests to the Authorize.Net server.
 */
function commerce_authnet_aim_server_url($txn_mode) {
  switch ($txn_mode) {
    case AUTHNET_TXN_MODE_LIVE:
    case AUTHNET_TXN_MODE_LIVE_TEST:
      return 'https://secure.authorize.net/gateway/transact.dll';
    case AUTHNET_TXN_MODE_DEVELOPER:
      return 'https://test.authorize.net/gateway/transact.dll';
  }
}

/**
 * Returns the transaction type string for Authorize.Net that corresponds to the
 *   Drupal Commerce constant.
 *
 * @param $txn_type
 *   A Drupal Commerce transaction type constant.
 */
function commerce_authnet_txn_type($txn_type) {
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_ONLY:
      return 'AUTH_ONLY';
    case COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE:
      return 'PRIOR_AUTH_CAPTURE';
    case COMMERCE_CREDIT_AUTH_CAPTURE:
      return 'AUTH_CAPTURE';
    case COMMERCE_CREDIT_REFERENCE_SET:
    case COMMERCE_CREDIT_REFERENCE_TXN:
    case COMMERCE_CREDIT_REFERENCE_REMOVE:
    case COMMERCE_CREDIT_REFERENCE_CREDIT:
      return NULL;
    case COMMERCE_CREDIT_CREDIT:
      return 'CREDIT';
    case COMMERCE_CREDIT_VOID:
      return 'VOID';
  }
}

/**
 * Returns the description of an Authorize.Net transaction type.
 *
 * @param $txn_type
 *   An Authorize.Net transaction type string.
 */
function commerce_authnet_reverse_txn_type($txn_type) {
  switch (strtoupper($txn_type)) {
    case 'AUTH_ONLY':
      return t('Authorization only');
    case 'PRIOR_AUTH_CAPTURE':
      return t('Prior authorization capture');
    case 'AUTH_CAPTURE':
      return t('Authorization and capture');
    case 'CREDIT':
      return t('Credit');
    case 'VOID':
      return t('Void');
  }
}

/**
 * Returns the message text for an AVS response code.
 */
function commerce_authnet_avs_response($code) {
  switch ($code) {
    case 'A':
      return t('Address (Street) matches, ZIP does not');
    case 'B':
      return t('Address information not provided for AVS check');
    case 'E':
      return t('AVS error');
    case 'G':
      return t('Non-U.S. Card Issuing Bank');
    case 'N':
      return t('No Match on Address (Street) or ZIP');
    case 'P':
      return t('AVS not applicable for this transaction');
    case 'R':
      return t('Retry – System unavailable or timed out');
    case 'S':
      return t('Service not supported by issuer');
    case 'U':
      return t('Address information is unavailable');
    case 'W':
      return t('Nine digit ZIP matches, Address (Street) does not');
    case 'X':
      return t('Address (Street) and nine digit ZIP match');
    case 'Y':
      return t('Address (Street) and five digit ZIP match');
    case 'Z':
      return t('Five digit ZIP matches, Address (Street) does not');
  }

  return '-';
}

/**
 * Returns the message text for a CVV match.
 */
function commerce_authnet_cvv_response($code) {
  switch ($code) {
    case 'M':
      return t('Match');
    case 'N':
      return t('No Match');
    case 'P':
      return t('Not Processed');
    case 'S':
      return t('Should have been present');
    case 'U':
      return t('Issuer unable to process request');
  }

  return '-';
}
