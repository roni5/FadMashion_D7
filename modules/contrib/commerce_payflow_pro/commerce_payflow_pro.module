<?php

/**
 * @file
 * Implements Paypals Payflow Pro payment services for use in Drupal Commerce.
 */
 
define('PAYPAL_TXN_MODE_LIVE', 'live');
define('PAYPAL_TXN_MODE_SANDBOX', 'sand_box');
 

/**
 * Implements hook_menu().
 */
function commerce_payflow_pro_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/paypal-direct'] = array(
    'title' => 'Paypal Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_payflow_pro_capture_form', 3, 5),
    'access callback' => 'commerce_payflow_pro_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_payflow_pro.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the prior authorization capture form.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_payflow_pro_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Paypal Direct or isn't awaiting capture.
  if ($transaction->payment_method != 'payflow_pro' || strtoupper($transaction->remote_status) != 'AUTH_ONLY') {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }

  // Allow access if the user can update payments on this order.
  return commerce_payment_transaction_access('update', $order, $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payflow_pro_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['payflow_pro'] = array(
    'base' => 'commerce_payflow_pro',
    'title' => t('Payflow Pro'),
    'short_title' => t('PP Direct'),
    'display_title' => t('Credit card (Payflow Pro)'),
    'description' => t('Integrates PayPals Payflow Pro Service directly.'),
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_payflow_pro_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'user' => '',
    'vendor' => '',
    'partner' => 'Paypal',
    'pwd' => '',
    'txn_mode' => PAYPAL_TXN_MODE_SANDBOX,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'email_customer' => FALSE,
    'log' => array('request' => '0', 'response' => '0'),
  );

  $form['user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#description' => t('If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users on the account, USER has the same value as VENDOR.'),
    '#default_value' => $settings['user'],
    '#required' => TRUE,
  );
  $form['vendor'] = array(
    '#type' => 'textfield',
    '#title' => t('Vendor'),
    '#description' => t('Your merchant login ID that you created when you registered for the account.'),
    '#default_value' => $settings['vendor'],
    '#required' => TRUE,
  );
  $form['partner'] = array(
    '#type' => 'textfield',
    '#title' => t('Partner'),
    '#description' => t('The ID provided to you by the authorized PayPal Reseller who registered you for the Payflow SDK. If you purchased your account directly from PayPal, use PayPal.'),
    '#default_value' => $settings['partner'],
    '#required' => TRUE,
  );
  $form['pwd'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('The password that you defined while registering for the account.'),
    '#default_value' => $settings['pwd'],
    '#required' => TRUE,
  );
  
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.') . '<br />' . t('Only specify a developer test account if you login to your account through https://test.authorize.net.'),
    '#options' => array(
      PAYPAL_TXN_MODE_LIVE => t('Live transactions in a live account'),
      PAYPAL_TXN_MODE_SANDBOX => t('Sandbox'),
    ),
    '#default_value' => $settings['txn_mode'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );
  
  /*
  $form['email_customer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tell PayPal to e-mail the customer a receipt based on your account settings.'),
    '#default_value' => $settings['email_customer'],
  );
  */
  
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_payflow_pro_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  return commerce_payment_credit_card_form(array('code' => ''));
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_payflow_pro_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_payflow_pro_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Build a name-value pair array for this transaction.
  $nvp = array(
    'TRXTYPE' => commerce_payflow_pro_txn_type($payment_method['settings']['txn_type']),
    'TENDER'  => 'C', // TODO - Other options in commerce_payflow_pro_tender_type()
    'AMT'     => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
    'ACCT'    => $pane_values['credit_card']['number'],
    'EXPDATE' => $pane_values['credit_card']['exp_month'] . $pane_values['credit_card']['exp_year'],
  );

  if (isset($pane_values['credit_card']['code'])) {
    $nvp['x_card_code'] = $pane_values['credit_card']['code'];
  }

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if ($line_item_wrapper->type->value() == 'product') {
      $description[] = round($line_item_wrapper->quantity->value()) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  // Add additional transaction invormation to the request array.
  $nvp += array(
    // Order Information
    'x_invoice_num' => $order->order_number,
    'x_description' => substr(implode(', ', $description), 0, 255),

    // Customer Information
    'x_first_name'  => substr($billing_address['first_name'], 0, 50),
    'x_last_name'   => substr($billing_address['last_name'], 0, 50),
    'x_company'     => substr($billing_address['organisation_name'], 0, 50),
    'x_address'     => substr($billing_address['thoroughfare'], 0, 60),
    'x_city'        => substr($billing_address['locality'], 0, 40),
    'x_state'       => substr($billing_address['administrative_area'], 0, 40),
    'x_zip'         => substr($billing_address['postal_code'], 0, 20),
    'x_country'     => $billing_address['country'],
    'x_email'       => substr($order->mail, 0, 255),
    'x_cust_id'     => substr($order->uid, 0, 20),
    'x_customer_ip' => substr(ip_address(), 0, 15),
  );

  // Submit the request
  $response = commerce_payflow_pro_request($payment_method, $nvp);
  
  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('payflow_pro', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response['PNREF'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $response;

  // If we didn't get an approval response code...
  if ($response['RESULT'] != '0') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($payment_method['settings']['txn_type']) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = $response[11];
  // Build a meaningful response message.
  $message = array(
    '<b>' . commerce_payflow_pro_reverse_txn_type($nvp['TENDER']) . '</b>',
    '<b>' . ($response[0] != '0' ? t('REJECTED') : t('ACCEPTED')) . ':</b> ',
    t('AVS response: ' . check_plain($response['RESPMSG'])),
  );

  // Add the CVV response if enabled.
  if (isset($nvp['x_card_code'])) {
    $message[] = t('CVV match: @cvv', array('@cvv' => commerce_payflow_pro_cvv_response($response['CVV2MATCH'])));
  }

  $transaction->message = implode('<br />', $message);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($response['RESLUT'] != '0') {
    drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
    drupal_set_message(check_plain($response[3]), 'error');
    return FALSE;
  }
}

/**
 * Submits a request to PaypalDirect.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_payflow_pro_request($payment_method, $nvp = array()) {
  // Get the API endpoint URL for the method's transaction mode.
  $url = commerce_payflow_pro_server_url($payment_method['settings']['txn_mode']);

  // Add the default name-value pairs to the array.
  $nvp += array(
    // API credentials
    'PARTNER' => $payment_method['settings']['partner'],
    'USER'    => $payment_method['settings']['user'],
    'PWD'     => $payment_method['settings']['pwd'],
    'VENDOR'  => $payment_method['settings']['vendor'],
    'VERBOSITY' => 'MEDIUM',
  );

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_payflow_pro_request', $nvp);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {
    // Mask the credit card number and CVV.
    $log_nvp = $nvp;
    $log_nvp['VENDOR'] = str_repeat('X', strlen($log_nvp['VENDOR']));
    $log_nvp['PWD'] = str_repeat('X', strlen($log_nvp['PWD']));

    if (!empty($log_nvp['x_card_num'])) {
      $log_nvp['x_card_num'] = str_repeat('X', strlen($log_nvp['x_card_num']) - 4) . substr($log_nvp['x_card_num'], -4);
    }

    if (!empty($log_nvp['x_card_code'])) {
      $log_nvp['x_card_code'] = str_repeat('X', strlen($log_nvp['x_card_code']));
    }

    watchdog('commerce_payflow_pro', 'Authorize.Net AIM request to @url: !param', array('@url' => $url, '!param' => '<pre>' . check_plain(print_r($log_nvp, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Prepare the name-value pair array to be sent as a string.
  $pairs = array();
  foreach ($nvp as $key => $value) {
    $pairs[] = $key . '=' . urlencode($value);
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $pairs));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);
  
  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_payflow_pro', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // Make the response an array and trim off the encapsulating characters.
  $response = explode('&', $result);
  
  $return = array();
  for ($i = 0; $i < count($response); $i++) {
    $kv = explode('=', $response[$i]);
    $return[$kv[0]] = $kv[1];
  }

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_payflow_pro', 'Paypal Direct response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  return $return;
}

/**
 * Returns the URL to the Paypal server determined by transaction mode.
 *
 * @param $txn_mode
 *   The transaction mode that relates to the live or test server.
 *
 * @return
 *   The URL to use to submit requests to the server.
 */
function commerce_payflow_pro_server_url($txn_mode) {
  switch ($txn_mode) {
    case PAYPAL_TXN_MODE_LIVE:
      return 'https://payflowpro.paypal.com';
    case PAYPAL_TXN_MODE_SANDBOX:
      return 'https://pilot-payflowpro.paypal.com'; 
  }
}

/**
 * Returns Tender Type
 */
function commerce_payflow_pro_tender_type($tender) {
  switch ($tender) {
    /*
z A = Automated clearinghouse
z C = Credit card
z D = Pinless debit
z K = Telecheck
z P = PayPa

*/
  }
}

/**
 * Returns the transaction type string for Paypal that 
 *    corresponds to the Drupal Commerce constant.
 *
 * @param $txn_type
 *   A Drupal Commerce transaction type constant.
 */
function commerce_payflow_pro_txn_type($txn_type) {
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_ONLY:
      return 'A'; // Authorization
    case COMMERCE_CREDIT_AUTH_CAPTURE:
      return 'S'; // SALE
    case COMMERCE_CREDIT_CREDIT:
      return 'C'; // Credit
    case COMMERCE_CREDIT_VOID:
      return 'V'; // VOID
    case COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE:
      return 'D'; // Delayed Capture
    case COMMERCE_CREDIT_REFERENCE_SET:
    case COMMERCE_CREDIT_REFERENCE_TXN:
    case COMMERCE_CREDIT_REFERENCE_REMOVE:
    case COMMERCE_CREDIT_REFERENCE_CREDIT:
      return NULL;
  }
}

/**
 * Returns the description of a transaction type.
 *
 * @param $txn_type
 *   Transaction type string.
 */
function commerce_payflow_pro_reverse_txn_type($txn_type) {
  switch (strtoupper($txn_type)) {
    case 'S': return t('Sale Transaction');
    case 'A': return t('Authorization');
    case 'D': return t('Delayed Capture');
    case 'C': return t('Credit');
    case 'V': return t('Void');
  }
}

/**
 * Returns the message text for a CVV match.
 */
function commerce_payflow_pro_cvv_response($code) {
  switch ($code) {
    case 'Y':
      return t('Match');
    case 'N':
      return t('No Match');
    default:
      return t('Not Processed');
  }
}
